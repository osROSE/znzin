//--------------------------------------------------------------------------------
// 이 파일은 zz_script_lua.lua 스크립트에 의해 자동생성된 코드입니다.
//
// 직접 수정하지 마십시오.
// 생성시간: 12/09/08 21:15:18
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// activateLog
//--------------------------------------------------------------------------------
int zz_lua_activateLog (lua_State * L)
{
	int param_index = 1;
	const char where[] = "activateLog";
	int return_num = 0;

	int bTrueFalse = get_param_int( L, param_index, where );

	set_param_int( L, return_num, activateLog( bTrueFalse ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// addRenderUnit
//--------------------------------------------------------------------------------
int zz_lua_addRenderUnit (lua_State * L)
{
	int param_index = 1;
	const char where[] = "addRenderUnit";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	HNODE hMesh = get_param_uint( L, param_index, where );
	HNODE hMaterial = get_param_uint( L, param_index, where );
	HNODE hLight = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, addRenderUnit( hVisible, hMesh, hMaterial, hLight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// applyMotion
//--------------------------------------------------------------------------------
int zz_lua_applyMotion (lua_State * L)
{
	int param_index = 1;
	const char where[] = "applyMotion";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, applyMotion( hAnimatable ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// attachMotion
//--------------------------------------------------------------------------------
int zz_lua_attachMotion (lua_State * L)
{
	int param_index = 1;
	const char where[] = "attachMotion";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );
	HNODE hMotion = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, attachMotion( hNode, hMotion ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// beginPan
//--------------------------------------------------------------------------------
int zz_lua_beginPan (lua_State * L)
{
	int param_index = 1;
	const char where[] = "beginPan";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float ScreenX = get_param_float( L, param_index, where );
	float ScreenY = get_param_float( L, param_index, where );

	set_param_int( L, return_num, beginPan( hCamera, ScreenX, ScreenY ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// beginProfiler
//--------------------------------------------------------------------------------
int zz_lua_beginProfiler (lua_State * L)
{
	int param_index = 1;
	const char where[] = "beginProfiler";
	int return_num = 0;

	beginProfiler(  );

	return return_num;
}

//--------------------------------------------------------------------------------
// beginScene
//--------------------------------------------------------------------------------
int zz_lua_beginScene (lua_State * L)
{
	int param_index = 1;
	const char where[] = "beginScene";
	int return_num = 0;


	set_param_int( L, return_num, beginScene( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// beginSprite
//--------------------------------------------------------------------------------
int zz_lua_beginSprite (lua_State * L)
{
	int param_index = 1;
	const char where[] = "beginSprite";
	int return_num = 0;

	int iFlag = get_param_int( L, param_index, where );

	set_param_int( L, return_num, beginSprite( iFlag ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// beginTrackball
//--------------------------------------------------------------------------------
int zz_lua_beginTrackball (lua_State * L)
{
	int param_index = 1;
	const char where[] = "beginTrackball";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float ScreenX = get_param_float( L, param_index, where );
	float ScreenY = get_param_float( L, param_index, where );

	set_param_int( L, return_num, beginTrackball( hCamera, ScreenX, ScreenY ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// buildNormal
//--------------------------------------------------------------------------------
int zz_lua_buildNormal (lua_State * L)
{
	int param_index = 1;
	const char where[] = "buildNormal";
	int return_num = 0;

	HNODE hMesh = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, buildNormal( hMesh ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// buildScene
//--------------------------------------------------------------------------------
int zz_lua_buildScene (lua_State * L)
{
	int param_index = 1;
	const char where[] = "buildScene";
	int return_num = 0;

	buildScene(  );

	return return_num;
}

//--------------------------------------------------------------------------------
// callFloat
//--------------------------------------------------------------------------------
int zz_lua_callFloat (lua_State * L)
{
	int param_index = 1;
	const char where[] = "callFloat";
	int return_num = 0;

	ZSTRING funcString = get_param_string( L, param_index, where );

	set_param_float( L, return_num, callFloat( funcString ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// callHNODE
//--------------------------------------------------------------------------------
int zz_lua_callHNODE (lua_State * L)
{
	int param_index = 1;
	const char where[] = "callHNODE";
	int return_num = 0;

	ZSTRING funcString = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, callHNODE( funcString ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// callInt
//--------------------------------------------------------------------------------
int zz_lua_callInt (lua_State * L)
{
	int param_index = 1;
	const char where[] = "callInt";
	int return_num = 0;

	ZSTRING funcString = get_param_string( L, param_index, where );

	set_param_int( L, return_num, callInt( funcString ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// callString
//--------------------------------------------------------------------------------
int zz_lua_callString (lua_State * L)
{
	int param_index = 1;
	const char where[] = "callString";
	int return_num = 0;

	ZSTRING funcString = get_param_string( L, param_index, where );

	set_param_string( L, return_num, callString( funcString ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// cameraAttachTarget
//--------------------------------------------------------------------------------
int zz_lua_cameraAttachTarget (lua_State * L)
{
	int param_index = 1;
	const char where[] = "cameraAttachTarget";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	HNODE hModel = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, cameraAttachTarget( hCamera, hModel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// cameraDetachTarget
//--------------------------------------------------------------------------------
int zz_lua_cameraDetachTarget (lua_State * L)
{
	int param_index = 1;
	const char where[] = "cameraDetachTarget";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, cameraDetachTarget( hCamera ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// cameraUpdate
//--------------------------------------------------------------------------------
int zz_lua_cameraUpdate (lua_State * L)
{
	int param_index = 1;
	const char where[] = "cameraUpdate";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, cameraUpdate( hCamera ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// clearMeshMatid
//--------------------------------------------------------------------------------
int zz_lua_clearMeshMatid (lua_State * L)
{
	int param_index = 1;
	const char where[] = "clearMeshMatid";
	int return_num = 0;

	HNODE hMesh = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, clearMeshMatid( hMesh ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// clearRenderUnit
//--------------------------------------------------------------------------------
int zz_lua_clearRenderUnit (lua_State * L)
{
	int param_index = 1;
	const char where[] = "clearRenderUnit";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, clearRenderUnit( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// clearScreen
//--------------------------------------------------------------------------------
int zz_lua_clearScreen (lua_State * L)
{
	int param_index = 1;
	const char where[] = "clearScreen";
	int return_num = 0;

	clearScreen(  );

	return return_num;
}

//--------------------------------------------------------------------------------
// clearSpecialEffect
//--------------------------------------------------------------------------------
int zz_lua_clearSpecialEffect (lua_State * L)
{
	int param_index = 1;
	const char where[] = "clearSpecialEffect";
	int return_num = 0;


	set_param_int( L, return_num, clearSpecialEffect( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// closeFileSystem
//--------------------------------------------------------------------------------
int zz_lua_closeFileSystem (lua_State * L)
{
	int param_index = 1;
	const char where[] = "closeFileSystem";
	int return_num = 0;


	set_param_int( L, return_num, closeFileSystem( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// collectByMinMax
//--------------------------------------------------------------------------------
int zz_lua_collectByMinMax (lua_State * L)
{
	int param_index = 1;
	const char where[] = "collectByMinMax";
	int return_num = 0;

	float fMinX = get_param_float( L, param_index, where );
	float fMinY = get_param_float( L, param_index, where );
	float fMinZ = get_param_float( L, param_index, where );
	float fMaxX = get_param_float( L, param_index, where );
	float fMaxY = get_param_float( L, param_index, where );
	float fMaxZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, collectByMinMax( fMinX, fMinY, fMinZ, fMaxX, fMaxY, fMaxZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// collectByNodeBBox
//--------------------------------------------------------------------------------
int zz_lua_collectByNodeBBox (lua_State * L)
{
	int param_index = 1;
	const char where[] = "collectByNodeBBox";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, collectByNodeBBox( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// controlAnimatable
//--------------------------------------------------------------------------------
int zz_lua_controlAnimatable (lua_State * L)
{
	int param_index = 1;
	const char where[] = "controlAnimatable";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );
	int iControl = get_param_int( L, param_index, where );

	set_param_int( L, return_num, controlAnimatable( hAnimatable, iControl ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// controlParticle
//--------------------------------------------------------------------------------
int zz_lua_controlParticle (lua_State * L)
{
	int param_index = 1;
	const char where[] = "controlParticle";
	int return_num = 0;

	HNODE hParticle = get_param_uint( L, param_index, where );
	int iControl = get_param_int( L, param_index, where );

	set_param_int( L, return_num, controlParticle( hParticle, iControl ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// controlTrail
//--------------------------------------------------------------------------------
int zz_lua_controlTrail (lua_State * L)
{
	int param_index = 1;
	const char where[] = "controlTrail";
	int return_num = 0;

	HNODE hTrail = get_param_uint( L, param_index, where );
	int iControl = get_param_int( L, param_index, where );

	set_param_int( L, return_num, controlTrail( hTrail, iControl ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// cullScene
//--------------------------------------------------------------------------------
int zz_lua_cullScene (lua_State * L)
{
	int param_index = 1;
	const char where[] = "cullScene";
	int return_num = 0;

	cullScene(  );

	return return_num;
}

//--------------------------------------------------------------------------------
// destSoundSystem
//--------------------------------------------------------------------------------
int zz_lua_destSoundSystem (lua_State * L)
{
	int param_index = 1;
	const char where[] = "destSoundSystem";
	int return_num = 0;


	set_param_int( L, return_num, destSoundSystem( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// doLog
//--------------------------------------------------------------------------------
int zz_lua_doLog (lua_State * L)
{
	int param_index = 1;
	const char where[] = "doLog";
	int return_num = 0;

	ZSTRING pLogMessage = get_param_string( L, param_index, where );
	doLog( pLogMessage  );

	return return_num;
}

//--------------------------------------------------------------------------------
// doPan
//--------------------------------------------------------------------------------
int zz_lua_doPan (lua_State * L)
{
	int param_index = 1;
	const char where[] = "doPan";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float ScreenX = get_param_float( L, param_index, where );
	float ScreenY = get_param_float( L, param_index, where );
	float PanSize = get_param_float( L, param_index, where );

	set_param_int( L, return_num, doPan( hCamera, ScreenX, ScreenY, PanSize ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// doScript
//--------------------------------------------------------------------------------
int zz_lua_doScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "doScript";
	int return_num = 0;

	ZSTRING pScriptName = get_param_string( L, param_index, where );

	set_param_int( L, return_num, doScript( pScriptName ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// dollyCamera
//--------------------------------------------------------------------------------
int zz_lua_dollyCamera (lua_State * L)
{
	int param_index = 1;
	const char where[] = "dollyCamera";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float StepSize = get_param_float( L, param_index, where );

	set_param_int( L, return_num, dollyCamera( hCamera, StepSize ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// drawFontLater
//--------------------------------------------------------------------------------
int zz_lua_drawFontLater (lua_State * L)
{
	int param_index = 1;
	const char where[] = "drawFontLater";
	int return_num = 0;

	HNODE hFont = get_param_uint( L, param_index, where );
	int iX = get_param_int( L, param_index, where );
	int iY = get_param_int( L, param_index, where );
	ZSTRING pMsg = get_param_string( L, param_index, where );

	set_param_int( L, return_num, drawFontLater( hFont, iX, iY, pMsg ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// drawFontScript
//--------------------------------------------------------------------------------
int zz_lua_drawFontScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "drawFontScript";
	int return_num = 0;

	HNODE hFont = get_param_uint( L, param_index, where );
	int iX = get_param_int( L, param_index, where );
	int iY = get_param_int( L, param_index, where );
	ZSTRING pMessage = get_param_string( L, param_index, where );

	set_param_int( L, return_num, drawFontScript( hFont, iX, iY, pMessage ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// dumpResourcesInViewstrum
//--------------------------------------------------------------------------------
int zz_lua_dumpResourcesInViewstrum (lua_State * L)
{
	int param_index = 1;
	const char where[] = "dumpResourcesInViewstrum";
	int return_num = 0;

	int bTerrain = get_param_int( L, param_index, where );
	int bOcean = get_param_int( L, param_index, where );
	int bOpaque = get_param_int( L, param_index, where );
	int bTransparent = get_param_int( L, param_index, where );

	set_param_int( L, return_num, dumpResourcesInViewstrum( bTerrain, bOcean, bOpaque, bTransparent ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// enableRenderState
//--------------------------------------------------------------------------------
int zz_lua_enableRenderState (lua_State * L)
{
	int param_index = 1;
	const char where[] = "enableRenderState";
	int return_num = 0;

	int bTrueOrFalse = get_param_int( L, param_index, where );

	set_param_int( L, return_num, enableRenderState( bTrueOrFalse ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// endPan
//--------------------------------------------------------------------------------
int zz_lua_endPan (lua_State * L)
{
	int param_index = 1;
	const char where[] = "endPan";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float ScreenX = get_param_float( L, param_index, where );
	float ScreenY = get_param_float( L, param_index, where );

	set_param_int( L, return_num, endPan( hCamera, ScreenX, ScreenY ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// endProfiler
//--------------------------------------------------------------------------------
int zz_lua_endProfiler (lua_State * L)
{
	int param_index = 1;
	const char where[] = "endProfiler";
	int return_num = 0;

	ZSTRING pProfilerName = get_param_string( L, param_index, where );
	endProfiler( pProfilerName  );

	return return_num;
}

//--------------------------------------------------------------------------------
// endScene
//--------------------------------------------------------------------------------
int zz_lua_endScene (lua_State * L)
{
	int param_index = 1;
	const char where[] = "endScene";
	int return_num = 0;


	set_param_int( L, return_num, endScene( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// endSprite
//--------------------------------------------------------------------------------
int zz_lua_endSprite (lua_State * L)
{
	int param_index = 1;
	const char where[] = "endSprite";
	int return_num = 0;


	set_param_int( L, return_num, endSprite( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// endTrackball
//--------------------------------------------------------------------------------
int zz_lua_endTrackball (lua_State * L)
{
	int param_index = 1;
	const char where[] = "endTrackball";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float ScreenX = get_param_float( L, param_index, where );
	float ScreenY = get_param_float( L, param_index, where );

	set_param_int( L, return_num, endTrackball( hCamera, ScreenX, ScreenY ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// fadeIn
//--------------------------------------------------------------------------------
int zz_lua_fadeIn (lua_State * L)
{
	int param_index = 1;
	const char where[] = "fadeIn";
	int return_num = 0;

	float fZeroToOne = get_param_float( L, param_index, where );
	fadeIn( fZeroToOne  );

	return return_num;
}

//--------------------------------------------------------------------------------
// fileClose
//--------------------------------------------------------------------------------
int zz_lua_fileClose (lua_State * L)
{
	int param_index = 1;
	const char where[] = "fileClose";
	int return_num = 0;

	HNODE hFile = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, fileClose( hFile ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// fileReadFrom
//--------------------------------------------------------------------------------
int zz_lua_fileReadFrom (lua_State * L)
{
	int param_index = 1;
	const char where[] = "fileReadFrom";
	int return_num = 0;

	ZSTRING pFilename = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, fileReadFrom( pFilename ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// fileReadWord
//--------------------------------------------------------------------------------
int zz_lua_fileReadWord (lua_State * L)
{
	int param_index = 1;
	const char where[] = "fileReadWord";
	int return_num = 0;

	HNODE hFile = get_param_uint( L, param_index, where );

	set_param_string( L, return_num, fileReadWord( hFile ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// findNode
//--------------------------------------------------------------------------------
int zz_lua_findNode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "findNode";
	int return_num = 0;

	ZSTRING pNodeName = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, findNode( pNodeName ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// flushSprite
//--------------------------------------------------------------------------------
int zz_lua_flushSprite (lua_State * L)
{
	int param_index = 1;
	const char where[] = "flushSprite";
	int return_num = 0;


	set_param_int( L, return_num, flushSprite( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// generateMeshStrip
//--------------------------------------------------------------------------------
int zz_lua_generateMeshStrip (lua_State * L)
{
	int param_index = 1;
	const char where[] = "generateMeshStrip";
	int return_num = 0;

	HNODE hMesh = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, generateMeshStrip( hMesh ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getAnimatableSpeed
//--------------------------------------------------------------------------------
int zz_lua_getAnimatableSpeed (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getAnimatableSpeed";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getAnimatableSpeed( hAnimatable ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getAnimatableState
//--------------------------------------------------------------------------------
int zz_lua_getAnimatableState (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getAnimatableState";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getAnimatableState( hAnimatable ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getBone
//--------------------------------------------------------------------------------
int zz_lua_getBone (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getBone";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );
	int iBoneIndex = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, getBone( hModel, iBoneIndex ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getCameraDefault
//--------------------------------------------------------------------------------
int zz_lua_getCameraDefault (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getCameraDefault";
	int return_num = 0;


	set_param_uint( L, return_num, getCameraDefault( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getCameraEyeX
//--------------------------------------------------------------------------------
int zz_lua_getCameraEyeX (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getCameraEyeX";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getCameraEyeX( hCamera ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getCameraEyeY
//--------------------------------------------------------------------------------
int zz_lua_getCameraEyeY (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getCameraEyeY";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getCameraEyeY( hCamera ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getCameraEyeZ
//--------------------------------------------------------------------------------
int zz_lua_getCameraEyeZ (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getCameraEyeZ";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getCameraEyeZ( hCamera ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getCameraFollowDistance
//--------------------------------------------------------------------------------
int zz_lua_getCameraFollowDistance (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getCameraFollowDistance";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getCameraFollowDistance( hCamera ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getCameraFollowPitch
//--------------------------------------------------------------------------------
int zz_lua_getCameraFollowPitch (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getCameraFollowPitch";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getCameraFollowPitch( hCamera ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getCameraFollowYaw
//--------------------------------------------------------------------------------
int zz_lua_getCameraFollowYaw (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getCameraFollowYaw";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getCameraFollowYaw( hCamera ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getCameraLight
//--------------------------------------------------------------------------------
int zz_lua_getCameraLight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getCameraLight";
	int return_num = 0;


	set_param_uint( L, return_num, getCameraLight( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getCollectNode
//--------------------------------------------------------------------------------
int zz_lua_getCollectNode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getCollectNode";
	int return_num = 0;

	int iNode = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, getCollectNode( iNode ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getCollisionLevel
//--------------------------------------------------------------------------------
int zz_lua_getCollisionLevel (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getCollisionLevel";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getCollisionLevel( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getDefaultLight
//--------------------------------------------------------------------------------
int zz_lua_getDefaultLight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getDefaultLight";
	int return_num = 0;

	HNODE hLight = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, getDefaultLight( hLight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getDevice
//--------------------------------------------------------------------------------
int zz_lua_getDevice (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getDevice";
	int return_num = 0;


	set_param_uint( L, return_num, getDevice( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getDrawPriority
//--------------------------------------------------------------------------------
int zz_lua_getDrawPriority (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getDrawPriority";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getDrawPriority( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getDummyPositionScript
//--------------------------------------------------------------------------------
int zz_lua_getDummyPositionScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getDummyPositionScript";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );
	int iDummyIndex = get_param_int( L, param_index, where );

	set_param_int( L, return_num, getDummyPositionScript( hModel, iDummyIndex ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getEngineVersion
//--------------------------------------------------------------------------------
int zz_lua_getEngineVersion (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getEngineVersion";
	int return_num = 0;


	set_param_string( L, return_num, getEngineVersion( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getExcludeClasses
//--------------------------------------------------------------------------------
int zz_lua_getExcludeClasses (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getExcludeClasses";
	int return_num = 0;


	set_param_int( L, return_num, getExcludeClasses( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getFloatArray
//--------------------------------------------------------------------------------
int zz_lua_getFloatArray (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getFloatArray";
	int return_num = 0;

	int iIndex = get_param_int( L, param_index, where );

	set_param_float( L, return_num, getFloatArray( iIndex ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getFontHeight
//--------------------------------------------------------------------------------
int zz_lua_getFontHeight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getFontHeight";
	int return_num = 0;

	HNODE hFont = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getFontHeight( hFont ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getFps
//--------------------------------------------------------------------------------
int zz_lua_getFps (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getFps";
	int return_num = 0;


	set_param_float( L, return_num, getFps( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getFullScreen
//--------------------------------------------------------------------------------
int zz_lua_getFullScreen (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getFullScreen";
	int return_num = 0;


	set_param_int( L, return_num, getFullScreen( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getGlobalFloat
//--------------------------------------------------------------------------------
int zz_lua_getGlobalFloat (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getGlobalFloat";
	int return_num = 0;

	ZSTRING pName = get_param_string( L, param_index, where );

	set_param_float( L, return_num, getGlobalFloat( pName ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getGravityVelocityZ
//--------------------------------------------------------------------------------
int zz_lua_getGravityVelocityZ (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getGravityVelocityZ";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getGravityVelocityZ( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getIncludeClasses
//--------------------------------------------------------------------------------
int zz_lua_getIncludeClasses (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getIncludeClasses";
	int return_num = 0;


	set_param_int( L, return_num, getIncludeClasses( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getMaterialShader
//--------------------------------------------------------------------------------
int zz_lua_getMaterialShader (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getMaterialShader";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, getMaterialShader( hMaterial ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getMeshInfo
//--------------------------------------------------------------------------------
int zz_lua_getMeshInfo (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getMeshInfo";
	int return_num = 0;

	HNODE hMesh = get_param_uint( L, param_index, where );
	int iInfoType = get_param_int( L, param_index, where );

	set_param_int( L, return_num, getMeshInfo( hMesh, iInfoType ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getMeshNumClipFaces
//--------------------------------------------------------------------------------
int zz_lua_getMeshNumClipFaces (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getMeshNumClipFaces";
	int return_num = 0;

	HNODE hMesh = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getMeshNumClipFaces( hMesh ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getModelDirection
//--------------------------------------------------------------------------------
int zz_lua_getModelDirection (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getModelDirection";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getModelDirection( hModel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getModelDirectionVectorScript
//--------------------------------------------------------------------------------
int zz_lua_getModelDirectionVectorScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getModelDirectionVectorScript";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getModelDirectionVectorScript( hModel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getModelFrontScript
//--------------------------------------------------------------------------------
int zz_lua_getModelFrontScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getModelFrontScript";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getModelFrontScript( hModel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getModelHeight
//--------------------------------------------------------------------------------
int zz_lua_getModelHeight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getModelHeight";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getModelHeight( hModel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getModelMoveVelocity
//--------------------------------------------------------------------------------
int zz_lua_getModelMoveVelocity (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getModelMoveVelocity";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getModelMoveVelocity( hModel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getMonitorRefreshRate
//--------------------------------------------------------------------------------
int zz_lua_getMonitorRefreshRate (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getMonitorRefreshRate";
	int return_num = 0;


	set_param_int( L, return_num, getMonitorRefreshRate( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getMotion
//--------------------------------------------------------------------------------
int zz_lua_getMotion (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getMotion";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, getMotion( hAnimatable ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getMotionFrame
//--------------------------------------------------------------------------------
int zz_lua_getMotionFrame (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getMotionFrame";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getMotionFrame( hNode ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getMotionTotalFrame
//--------------------------------------------------------------------------------
int zz_lua_getMotionTotalFrame (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getMotionTotalFrame";
	int return_num = 0;

	HNODE hMotion = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getMotionTotalFrame( hMotion ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getMotionTotalTime
//--------------------------------------------------------------------------------
int zz_lua_getMotionTotalTime (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getMotionTotalTime";
	int return_num = 0;

	HNODE hMotion = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getMotionTotalTime( hMotion ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getName
//--------------------------------------------------------------------------------
int zz_lua_getName (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getName";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );

	set_param_string( L, return_num, getName( hNode ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getNumAdapter
//--------------------------------------------------------------------------------
int zz_lua_getNumAdapter (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getNumAdapter";
	int return_num = 0;


	set_param_int( L, return_num, getNumAdapter( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getNumBones
//--------------------------------------------------------------------------------
int zz_lua_getNumBones (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getNumBones";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getNumBones( hModel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getNumDummies
//--------------------------------------------------------------------------------
int zz_lua_getNumDummies (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getNumDummies";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getNumDummies( hModel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getNumRenderUnit
//--------------------------------------------------------------------------------
int zz_lua_getNumRenderUnit (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getNumRenderUnit";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getNumRenderUnit( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getNumSceneNode
//--------------------------------------------------------------------------------
int zz_lua_getNumSceneNode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getNumSceneNode";
	int return_num = 0;


	set_param_int( L, return_num, getNumSceneNode( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getParent
//--------------------------------------------------------------------------------
int zz_lua_getParent (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getParent";
	int return_num = 0;

	HNODE hChild = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, getParent( hChild ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getParticleState
//--------------------------------------------------------------------------------
int zz_lua_getParticleState (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getParticleState";
	int return_num = 0;

	HNODE hParticle = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getParticleState( hParticle ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getPositionScript
//--------------------------------------------------------------------------------
int zz_lua_getPositionScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getPositionScript";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getPositionScript( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getPositionX
//--------------------------------------------------------------------------------
int zz_lua_getPositionX (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getPositionX";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getPositionX( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getPositionY
//--------------------------------------------------------------------------------
int zz_lua_getPositionY (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getPositionY";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getPositionY( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getPositionZ
//--------------------------------------------------------------------------------
int zz_lua_getPositionZ (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getPositionZ";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getPositionZ( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getPrevPositionX
//--------------------------------------------------------------------------------
int zz_lua_getPrevPositionX (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getPrevPositionX";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getPrevPositionX( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getPrevPositionY
//--------------------------------------------------------------------------------
int zz_lua_getPrevPositionY (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getPrevPositionY";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getPrevPositionY( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getPrevPositionZ
//--------------------------------------------------------------------------------
int zz_lua_getPrevPositionZ (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getPrevPositionZ";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getPrevPositionZ( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getRealPath
//--------------------------------------------------------------------------------
int zz_lua_getRealPath (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getRealPath";
	int return_num = 0;

	ZSTRING pPath = get_param_string( L, param_index, where );

	set_param_string( L, return_num, getRealPath( pPath ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getRepeatCount
//--------------------------------------------------------------------------------
int zz_lua_getRepeatCount (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getRepeatCount";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getRepeatCount( hAnimatable ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getSceneNode
//--------------------------------------------------------------------------------
int zz_lua_getSceneNode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getSceneNode";
	int return_num = 0;

	int iIndex = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, getSceneNode( iIndex ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getScreenHeight
//--------------------------------------------------------------------------------
int zz_lua_getScreenHeight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getScreenHeight";
	int return_num = 0;


	set_param_int( L, return_num, getScreenHeight( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getScreenWidth
//--------------------------------------------------------------------------------
int zz_lua_getScreenWidth (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getScreenWidth";
	int return_num = 0;


	set_param_int( L, return_num, getScreenWidth( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getSlidingScript
//--------------------------------------------------------------------------------
int zz_lua_getSlidingScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getSlidingScript";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float fMin = get_param_float( L, param_index, where );
	float fMax = get_param_float( L, param_index, where );
	float fNeighborDistance = get_param_float( L, param_index, where );
	float fVelocity = get_param_float( L, param_index, where );

	set_param_float( L, return_num, getSlidingScript( hVisible, fMin, fMax, fNeighborDistance, fVelocity ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getSoundState
//--------------------------------------------------------------------------------
int zz_lua_getSoundState (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getSoundState";
	int return_num = 0;

	HNODE hSound = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getSoundState( hSound ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getStartDelay
//--------------------------------------------------------------------------------
int zz_lua_getStartDelay (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getStartDelay";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getStartDelay( hAnimatable ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getTerrainHeight
//--------------------------------------------------------------------------------
int zz_lua_getTerrainHeight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getTerrainHeight";
	int return_num = 0;

	float fPositionX = get_param_float( L, param_index, where );
	float fPositionY = get_param_float( L, param_index, where );

	set_param_float( L, return_num, getTerrainHeight( fPositionX, fPositionY ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getTexture
//--------------------------------------------------------------------------------
int zz_lua_getTexture (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getTexture";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int iTextureIndex = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, getTexture( hMaterial, iTextureIndex ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getTexturePointer
//--------------------------------------------------------------------------------
int zz_lua_getTexturePointer (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getTexturePointer";
	int return_num = 0;

	HNODE hTexture = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, getTexturePointer( hTexture ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getTimeDiff
//--------------------------------------------------------------------------------
int zz_lua_getTimeDiff (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getTimeDiff";
	int return_num = 0;


	set_param_int( L, return_num, getTimeDiff( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getTrailState
//--------------------------------------------------------------------------------
int zz_lua_getTrailState (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getTrailState";
	int return_num = 0;

	HNODE hTrail = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getTrailState( hTrail ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getUseFog
//--------------------------------------------------------------------------------
int zz_lua_getUseFog (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getUseFog";
	int return_num = 0;


	set_param_int( L, return_num, getUseFog( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getUseWireMode
//--------------------------------------------------------------------------------
int zz_lua_getUseWireMode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getUseWireMode";
	int return_num = 0;


	set_param_int( L, return_num, getUseWireMode( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getUserData
//--------------------------------------------------------------------------------
int zz_lua_getUserData (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getUserData";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, getUserData( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getVisibility
//--------------------------------------------------------------------------------
int zz_lua_getVisibility (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getVisibility";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getVisibility( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getVisibleClipFace
//--------------------------------------------------------------------------------
int zz_lua_getVisibleClipFace (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getVisibleClipFace";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getVisibleClipFace( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getVisibleHeight
//--------------------------------------------------------------------------------
int zz_lua_getVisibleHeight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getVisibleHeight";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_float( L, return_num, getVisibleHeight( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getVisibleLight
//--------------------------------------------------------------------------------
int zz_lua_getVisibleLight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getVisibleLight";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iRenderUnit = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, getVisibleLight( hVisible, iRenderUnit ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getVisibleMaterial
//--------------------------------------------------------------------------------
int zz_lua_getVisibleMaterial (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getVisibleMaterial";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iRenderUnit = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, getVisibleMaterial( hVisible, iRenderUnit ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getVisibleMesh
//--------------------------------------------------------------------------------
int zz_lua_getVisibleMesh (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getVisibleMesh";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iRenderUnit = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, getVisibleMesh( hVisible, iRenderUnit ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getVisibleRadius
//--------------------------------------------------------------------------------
int zz_lua_getVisibleRadius (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getVisibleRadius";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int bSelectSmaller = get_param_int( L, param_index, where );

	set_param_float( L, return_num, getVisibleRadius( hVisible, bSelectSmaller ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getVisibleSeethruMode
//--------------------------------------------------------------------------------
int zz_lua_getVisibleSeethruMode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getVisibleSeethruMode";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, getVisibleSeethruMode( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getWorldHeight
//--------------------------------------------------------------------------------
int zz_lua_getWorldHeight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getWorldHeight";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );
	float fPointX = get_param_float( L, param_index, where );
	float fPointY = get_param_float( L, param_index, where );

	set_param_float( L, return_num, getWorldHeight( hNode, fPointX, fPointY ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// getWorldObjectHeightInScene
//--------------------------------------------------------------------------------
int zz_lua_getWorldObjectHeightInScene (lua_State * L)
{
	int param_index = 1;
	const char where[] = "getWorldObjectHeightInScene";
	int return_num = 0;

	float fWorldX = get_param_float( L, param_index, where );
	float fWorldY = get_param_float( L, param_index, where );
	float fDefaultHeight = get_param_float( L, param_index, where );

	set_param_float( L, return_num, getWorldObjectHeightInScene( fWorldX, fWorldY, fDefaultHeight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// inViewfrustum
//--------------------------------------------------------------------------------
int zz_lua_inViewfrustum (lua_State * L)
{
	int param_index = 1;
	const char where[] = "inViewfrustum";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, inViewfrustum( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// initSoundSystem
//--------------------------------------------------------------------------------
int zz_lua_initSoundSystem (lua_State * L)
{
	int param_index = 1;
	const char where[] = "initSoundSystem";
	int return_num = 0;


	set_param_int( L, return_num, initSoundSystem( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// insertToScene
//--------------------------------------------------------------------------------
int zz_lua_insertToScene (lua_State * L)
{
	int param_index = 1;
	const char where[] = "insertToScene";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, insertToScene( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// intersectNode
//--------------------------------------------------------------------------------
int zz_lua_intersectNode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "intersectNode";
	int return_num = 0;

	HNODE hNodeA = get_param_uint( L, param_index, where );
	HNODE hNodeB = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, intersectNode( hNodeA, hNodeB ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// intersectNodeSphereSphere
//--------------------------------------------------------------------------------
int zz_lua_intersectNodeSphereSphere (lua_State * L)
{
	int param_index = 1;
	const char where[] = "intersectNodeSphereSphere";
	int return_num = 0;

	HNODE hNodeA = get_param_uint( L, param_index, where );
	HNODE hNodeB = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, intersectNodeSphereSphere( hNodeA, hNodeB ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// intersectRayScript
//--------------------------------------------------------------------------------
int zz_lua_intersectRayScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "intersectRayScript";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );
	float originX = get_param_float( L, param_index, where );
	float originY = get_param_float( L, param_index, where );
	float originZ = get_param_float( L, param_index, where );
	float dirX = get_param_float( L, param_index, where );
	float dirY = get_param_float( L, param_index, where );
	float dirZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, intersectRayScript( hNode, originX, originY, originZ, dirX, dirY, dirZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// isA
//--------------------------------------------------------------------------------
int zz_lua_isA (lua_State * L)
{
	int param_index = 1;
	const char where[] = "isA";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );
	int iType = get_param_int( L, param_index, where );

	set_param_int( L, return_num, isA( hNode, iType ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// isDescendantOf
//--------------------------------------------------------------------------------
int zz_lua_isDescendantOf (lua_State * L)
{
	int param_index = 1;
	const char where[] = "isDescendantOf";
	int return_num = 0;

	HNODE hChild = get_param_uint( L, param_index, where );
	HNODE hParent = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, isDescendantOf( hChild, hParent ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// isDescendantOfType
//--------------------------------------------------------------------------------
int zz_lua_isDescendantOfType (lua_State * L)
{
	int param_index = 1;
	const char where[] = "isDescendantOfType";
	int return_num = 0;

	HNODE hChild = get_param_uint( L, param_index, where );
	int iType = get_param_int( L, param_index, where );

	set_param_int( L, return_num, isDescendantOfType( hChild, iType ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// linkBone
//--------------------------------------------------------------------------------
int zz_lua_linkBone (lua_State * L)
{
	int param_index = 1;
	const char where[] = "linkBone";
	int return_num = 0;

	HNODE hParentModel = get_param_uint( L, param_index, where );
	HNODE hNode = get_param_uint( L, param_index, where );
	int iSkel = get_param_int( L, param_index, where );

	set_param_int( L, return_num, linkBone( hParentModel, hNode, iSkel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// linkDummy
//--------------------------------------------------------------------------------
int zz_lua_linkDummy (lua_State * L)
{
	int param_index = 1;
	const char where[] = "linkDummy";
	int return_num = 0;

	HNODE hParentModel = get_param_uint( L, param_index, where );
	HNODE hNode = get_param_uint( L, param_index, where );
	int iDummy = get_param_int( L, param_index, where );

	set_param_int( L, return_num, linkDummy( hParentModel, hNode, iDummy ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// linkNode
//--------------------------------------------------------------------------------
int zz_lua_linkNode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "linkNode";
	int return_num = 0;

	HNODE hParent = get_param_uint( L, param_index, where );
	HNODE hNode = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, linkNode( hParent, hNode ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// linkVisibleWorld
//--------------------------------------------------------------------------------
int zz_lua_linkVisibleWorld (lua_State * L)
{
	int param_index = 1;
	const char where[] = "linkVisibleWorld";
	int return_num = 0;

	HNODE hParent = get_param_uint( L, param_index, where );
	HNODE hChild = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, linkVisibleWorld( hParent, hChild ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadAnimatable
//--------------------------------------------------------------------------------
int zz_lua_loadAnimatable (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadAnimatable";
	int return_num = 0;

	ZSTRING pAnimatableName = get_param_string( L, param_index, where );
	HNODE hMesh = get_param_uint( L, param_index, where );
	HNODE hMotion = get_param_uint( L, param_index, where );
	HNODE hMaterial = get_param_uint( L, param_index, where );
	HNODE hLight = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, loadAnimatable( pAnimatableName, hMesh, hMotion, hMaterial, hLight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadCamera
//--------------------------------------------------------------------------------
int zz_lua_loadCamera (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadCamera";
	int return_num = 0;

	ZSTRING pCameraName = get_param_string( L, param_index, where );
	ZSTRING pCameraPath = get_param_string( L, param_index, where );
	HNODE hCameraMotion = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, loadCamera( pCameraName, pCameraPath, hCameraMotion ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadCharacter
//--------------------------------------------------------------------------------
int zz_lua_loadCharacter (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadCharacter";
	int return_num = 0;

	ZSTRING characterFileName = get_param_string( L, param_index, where );

	set_param_int( L, return_num, loadCharacter( characterFileName ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadColormapMaterial
//--------------------------------------------------------------------------------
int zz_lua_loadColormapMaterial (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadColormapMaterial";
	int return_num = 0;

	ZSTRING pMaterialName = get_param_string( L, param_index, where );
	HNODE hShader = get_param_uint( L, param_index, where );
	ZSTRING pMapFileName = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, loadColormapMaterial( pMaterialName, hShader, pMapFileName ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadEffect
//--------------------------------------------------------------------------------
int zz_lua_loadEffect (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadEffect";
	int return_num = 0;

	ZSTRING pEffectName = get_param_string( L, param_index, where );
	ZSTRING pEffectFilePath = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, loadEffect( pEffectName, pEffectFilePath ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadFont
//--------------------------------------------------------------------------------
int zz_lua_loadFont (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadFont";
	int return_num = 0;

	ZSTRING pFontIDName = get_param_string( L, param_index, where );
	ZSTRING pFontName = get_param_string( L, param_index, where );
	int iFontCharset = get_param_int( L, param_index, where );
	int iFontSize = get_param_int( L, param_index, where );
	int iBold = get_param_int( L, param_index, where );
	int iItalic = get_param_int( L, param_index, where );
	int iColorR = get_param_int( L, param_index, where );
	int iColorG = get_param_int( L, param_index, where );
	int iColorB = get_param_int( L, param_index, where );
	int iColorA = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, loadFont( pFontIDName, pFontName, iFontCharset, iFontSize, iBold, iItalic, iColorR, iColorG, iColorB, iColorA ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadLight
//--------------------------------------------------------------------------------
int zz_lua_loadLight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadLight";
	int return_num = 0;

	ZSTRING pLightName = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, loadLight( pLightName ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadLightPoint
//--------------------------------------------------------------------------------
int zz_lua_loadLightPoint (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadLightPoint";
	int return_num = 0;

	ZSTRING pLightName = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, loadLightPoint( pLightName ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadMesh
//--------------------------------------------------------------------------------
int zz_lua_loadMesh (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadMesh";
	int return_num = 0;

	ZSTRING pMeshName = get_param_string( L, param_index, where );
	ZSTRING pMeshPath = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, loadMesh( pMeshName, pMeshPath ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadModel
//--------------------------------------------------------------------------------
int zz_lua_loadModel (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadModel";
	int return_num = 0;

	ZSTRING pModelName = get_param_string( L, param_index, where );
	HNODE hSkeleton = get_param_uint( L, param_index, where );
	HNODE hMotion = get_param_uint( L, param_index, where );
	float ScaleInLoad = get_param_float( L, param_index, where );

	set_param_uint( L, return_num, loadModel( pModelName, hSkeleton, hMotion, ScaleInLoad ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadMorpher
//--------------------------------------------------------------------------------
int zz_lua_loadMorpher (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadMorpher";
	int return_num = 0;

	ZSTRING pMorpherName = get_param_string( L, param_index, where );
	HNODE hMesh = get_param_uint( L, param_index, where );
	HNODE hMotion = get_param_uint( L, param_index, where );
	HNODE hMaterial = get_param_uint( L, param_index, where );
	HNODE hLight = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, loadMorpher( pMorpherName, hMesh, hMotion, hMaterial, hLight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadMotion
//--------------------------------------------------------------------------------
int zz_lua_loadMotion (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadMotion";
	int return_num = 0;

	ZSTRING pMotionName = get_param_string( L, param_index, where );
	ZSTRING pMotionFileName = get_param_string( L, param_index, where );
	int bUseLoop = get_param_int( L, param_index, where );
	int InterpTypePosition = get_param_int( L, param_index, where );
	int InterpTypeRotation = get_param_int( L, param_index, where );
	float Scale = get_param_float( L, param_index, where );
	int bForModel = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, loadMotion( pMotionName, pMotionFileName, bUseLoop, InterpTypePosition, InterpTypeRotation, Scale, bForModel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadMotionMixer
//--------------------------------------------------------------------------------
int zz_lua_loadMotionMixer (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadMotionMixer";
	int return_num = 0;

	ZSTRING pMixMotionName = get_param_string( L, param_index, where );
	HNODE hMotionA = get_param_uint( L, param_index, where );
	HNODE hMotionB = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, loadMotionMixer( pMixMotionName, hMotionA, hMotionB ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadNullColormapMaterial
//--------------------------------------------------------------------------------
int zz_lua_loadNullColormapMaterial (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadNullColormapMaterial";
	int return_num = 0;

	ZSTRING pMaterialName = get_param_string( L, param_index, where );
	HNODE hShader = get_param_uint( L, param_index, where );
	int iWidth = get_param_int( L, param_index, where );
	int iHeight = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, loadNullColormapMaterial( pMaterialName, hShader, iWidth, iHeight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadOceanBlock
//--------------------------------------------------------------------------------
int zz_lua_loadOceanBlock (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadOceanBlock";
	int return_num = 0;

	ZSTRING pOceanBlockName = get_param_string( L, param_index, where );
	float fOrigX = get_param_float( L, param_index, where );
	float fOrigY = get_param_float( L, param_index, where );
	float fOrigZ = get_param_float( L, param_index, where );
	float fWidth = get_param_float( L, param_index, where );
	float fHeight = get_param_float( L, param_index, where );
	int iRepeatU = get_param_int( L, param_index, where );
	int iRepeatV = get_param_int( L, param_index, where );
	HNODE hShader = get_param_uint( L, param_index, where );
	HNODE hLight = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, loadOceanBlock( pOceanBlockName, fOrigX, fOrigY, fOrigZ, fWidth, fHeight, iRepeatU, iRepeatV, hShader, hLight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadOceanMaterial
//--------------------------------------------------------------------------------
int zz_lua_loadOceanMaterial (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadOceanMaterial";
	int return_num = 0;

	ZSTRING pMatName = get_param_string( L, param_index, where );
	HNODE hShader = get_param_uint( L, param_index, where );
	ZSTRING pFirstTexture = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, loadOceanMaterial( pMatName, hShader, pFirstTexture ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadParticle
//--------------------------------------------------------------------------------
int zz_lua_loadParticle (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadParticle";
	int return_num = 0;

	ZSTRING pParticleName = get_param_string( L, param_index, where );
	ZSTRING pParticleFilename = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, loadParticle( pParticleName, pParticleFilename ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadParticleFromMem
//--------------------------------------------------------------------------------
int zz_lua_loadParticleFromMem (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadParticleFromMem";
	int return_num = 0;

	ZSTRING pParticleName = get_param_string( L, param_index, where );
	ZSTRING pParticleMem = get_param_string( L, param_index, where );
	int iMemSize = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, loadParticleFromMem( pParticleName, pParticleMem, iMemSize ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadShader
//--------------------------------------------------------------------------------
int zz_lua_loadShader (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadShader";
	int return_num = 0;

	ZSTRING pShaderName = get_param_string( L, param_index, where );
	ZSTRING pVertexShaderPath = get_param_string( L, param_index, where );
	ZSTRING pPixelShaderPath = get_param_string( L, param_index, where );
	int bUseBinary = get_param_int( L, param_index, where );
	int iVertexFormat = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, loadShader( pShaderName, pVertexShaderPath, pPixelShaderPath, bUseBinary, iVertexFormat ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadSkeleton
//--------------------------------------------------------------------------------
int zz_lua_loadSkeleton (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadSkeleton";
	int return_num = 0;

	ZSTRING pSkeletonName = get_param_string( L, param_index, where );
	ZSTRING pSkeletonPath = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, loadSkeleton( pSkeletonName, pSkeletonPath ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadSky
//--------------------------------------------------------------------------------
int zz_lua_loadSky (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadSky";
	int return_num = 0;

	ZSTRING pSkyName = get_param_string( L, param_index, where );
	HNODE hMesh = get_param_uint( L, param_index, where );
	HNODE hMaterial = get_param_uint( L, param_index, where );
	HNODE hLight = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, loadSky( pSkyName, hMesh, hMaterial, hLight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadSkyMaterial
//--------------------------------------------------------------------------------
int zz_lua_loadSkyMaterial (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadSkyMaterial";
	int return_num = 0;

	ZSTRING pMaterialName = get_param_string( L, param_index, where );
	HNODE hShader = get_param_uint( L, param_index, where );
	ZSTRING pMapFileName1 = get_param_string( L, param_index, where );
	ZSTRING pMapFileName2 = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, loadSkyMaterial( pMaterialName, hShader, pMapFileName1, pMapFileName2 ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadSound
//--------------------------------------------------------------------------------
int zz_lua_loadSound (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadSound";
	int return_num = 0;

	ZSTRING strSoundName = get_param_string( L, param_index, where );
	ZSTRING strWaveFileName = get_param_string( L, param_index, where );
	int iNumBuffers = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, loadSound( strSoundName, strWaveFileName, iNumBuffers ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadTerrainBlockTest
//--------------------------------------------------------------------------------
int zz_lua_loadTerrainBlockTest (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadTerrainBlockTest";
	int return_num = 0;

	ZSTRING pTerrainBlockName = get_param_string( L, param_index, where );
	int iX = get_param_int( L, param_index, where );
	int iY = get_param_int( L, param_index, where );
	int iType = get_param_int( L, param_index, where );
	HNODE hFirstMat = get_param_uint( L, param_index, where );
	HNODE hSecondMat = get_param_uint( L, param_index, where );
	HNODE hLightMat = get_param_uint( L, param_index, where );
	HNODE hTerrainShader = get_param_uint( L, param_index, where );
	HNODE hLight = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, loadTerrainBlockTest( pTerrainBlockName, iX, iY, iType, hFirstMat, hSecondMat, hLightMat, hTerrainShader, hLight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadText
//--------------------------------------------------------------------------------
int zz_lua_loadText (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadText";
	int return_num = 0;

	HNODE hFont = get_param_uint( L, param_index, where );
	int iX = get_param_int( L, param_index, where );
	int iY = get_param_int( L, param_index, where );
	ZSTRING pMessage = get_param_string( L, param_index, where );

	set_param_uint( L, return_num, loadText( hFont, iX, iY, pMessage ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadTexture
//--------------------------------------------------------------------------------
int zz_lua_loadTexture (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadTexture";
	int return_num = 0;

	ZSTRING pTextureName = get_param_string( L, param_index, where );
	ZSTRING pTextureFileName = get_param_string( L, param_index, where );
	int iMipLevels = get_param_int( L, param_index, where );
	int bUseFilter = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, loadTexture( pTextureName, pTextureFileName, iMipLevels, bUseFilter ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadTextureWithPool
//--------------------------------------------------------------------------------
int zz_lua_loadTextureWithPool (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadTextureWithPool";
	int return_num = 0;

	ZSTRING pTextureName = get_param_string( L, param_index, where );
	ZSTRING pTextureFileName = get_param_string( L, param_index, where );
	int iMipLevels = get_param_int( L, param_index, where );
	int bUseFilter = get_param_int( L, param_index, where );
	int iPoolType = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, loadTextureWithPool( pTextureName, pTextureFileName, iMipLevels, bUseFilter, iPoolType ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadTrailScript
//--------------------------------------------------------------------------------
int zz_lua_loadTrailScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadTrailScript";
	int return_num = 0;

	ZSTRING pName = get_param_string( L, param_index, where );
	float fDistancePerPoint = get_param_float( L, param_index, where );
	int iDurationInMilliSecond = get_param_int( L, param_index, where );
	int bUseCurve = get_param_int( L, param_index, where );
	ZSTRING pTexturePath = get_param_string( L, param_index, where );
	float fColorRed = get_param_float( L, param_index, where );
	float fColorGreen = get_param_float( L, param_index, where );
	float fColorBlue = get_param_float( L, param_index, where );
	float fColorAlpha = get_param_float( L, param_index, where );
	float fSP_X = get_param_float( L, param_index, where );
	float fSP_Y = get_param_float( L, param_index, where );
	float fSP_Z = get_param_float( L, param_index, where );
	float fEP_X = get_param_float( L, param_index, where );
	float fEP_Y = get_param_float( L, param_index, where );
	float fEP_Z = get_param_float( L, param_index, where );

	set_param_uint( L, return_num, loadTrailScript( pName, fDistancePerPoint, iDurationInMilliSecond, bUseCurve, pTexturePath, fColorRed, fColorGreen, fColorBlue, fColorAlpha, fSP_X, fSP_Y, fSP_Z, fEP_X, fEP_Y, fEP_Z ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// loadVisible
//--------------------------------------------------------------------------------
int zz_lua_loadVisible (lua_State * L)
{
	int param_index = 1;
	const char where[] = "loadVisible";
	int return_num = 0;

	ZSTRING pVisibleName = get_param_string( L, param_index, where );
	HNODE hMesh = get_param_uint( L, param_index, where );
	HNODE hMaterial = get_param_uint( L, param_index, where );
	HNODE hLight = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, loadVisible( pVisibleName, hMesh, hMaterial, hLight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// logTextures
//--------------------------------------------------------------------------------
int zz_lua_logTextures (lua_State * L)
{
	int param_index = 1;
	const char where[] = "logTextures";
	int return_num = 0;


	set_param_int( L, return_num, logTextures( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// lookAt
//--------------------------------------------------------------------------------
int zz_lua_lookAt (lua_State * L)
{
	int param_index = 1;
	const char where[] = "lookAt";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float eyeX = get_param_float( L, param_index, where );
	float eyeY = get_param_float( L, param_index, where );
	float eyeZ = get_param_float( L, param_index, where );
	float centerX = get_param_float( L, param_index, where );
	float centerY = get_param_float( L, param_index, where );
	float centerZ = get_param_float( L, param_index, where );
	float upX = get_param_float( L, param_index, where );
	float upY = get_param_float( L, param_index, where );
	float upZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, lookAt( hCamera, eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// moveCamera
//--------------------------------------------------------------------------------
int zz_lua_moveCamera (lua_State * L)
{
	int param_index = 1;
	const char where[] = "moveCamera";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float deviationX = get_param_float( L, param_index, where );
	float deviationY = get_param_float( L, param_index, where );
	float deviationZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, moveCamera( hCamera, deviationX, deviationY, deviationZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// openFileSystem
//--------------------------------------------------------------------------------
int zz_lua_openFileSystem (lua_State * L)
{
	int param_index = 1;
	const char where[] = "openFileSystem";
	int return_num = 0;

	ZSTRING pIndexFileName = get_param_string( L, param_index, where );

	set_param_int( L, return_num, openFileSystem( pIndexFileName ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// pickNodeScript
//--------------------------------------------------------------------------------
int zz_lua_pickNodeScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "pickNodeScript";
	int return_num = 0;

	int screenX = get_param_int( L, param_index, where );
	int screenY = get_param_int( L, param_index, where );

	set_param_uint( L, return_num, pickNodeScript( screenX, screenY ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// pickScreenX
//--------------------------------------------------------------------------------
int zz_lua_pickScreenX (lua_State * L)
{
	int param_index = 1;
	const char where[] = "pickScreenX";
	int return_num = 0;

	int screenX = get_param_int( L, param_index, where );
	int screenY = get_param_int( L, param_index, where );

	set_param_float( L, return_num, pickScreenX( screenX, screenY ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// pickScreenY
//--------------------------------------------------------------------------------
int zz_lua_pickScreenY (lua_State * L)
{
	int param_index = 1;
	const char where[] = "pickScreenY";
	int return_num = 0;

	int screenX = get_param_int( L, param_index, where );
	int screenY = get_param_int( L, param_index, where );

	set_param_float( L, return_num, pickScreenY( screenX, screenY ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// playSound
//--------------------------------------------------------------------------------
int zz_lua_playSound (lua_State * L)
{
	int param_index = 1;
	const char where[] = "playSound";
	int return_num = 0;

	HNODE hSound = get_param_uint( L, param_index, where );
	int bLoop = get_param_int( L, param_index, where );

	set_param_int( L, return_num, playSound( hSound, bLoop ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// popRenderUnit
//--------------------------------------------------------------------------------
int zz_lua_popRenderUnit (lua_State * L)
{
	int param_index = 1;
	const char where[] = "popRenderUnit";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, popRenderUnit( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// popSpecialEffect
//--------------------------------------------------------------------------------
int zz_lua_popSpecialEffect (lua_State * L)
{
	int param_index = 1;
	const char where[] = "popSpecialEffect";
	int return_num = 0;


	set_param_int( L, return_num, popSpecialEffect( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// postProcessScene
//--------------------------------------------------------------------------------
int zz_lua_postProcessScene (lua_State * L)
{
	int param_index = 1;
	const char where[] = "postProcessScene";
	int return_num = 0;

	postProcessScene(  );

	return return_num;
}

//--------------------------------------------------------------------------------
// preProcessScene
//--------------------------------------------------------------------------------
int zz_lua_preProcessScene (lua_State * L)
{
	int param_index = 1;
	const char where[] = "preProcessScene";
	int return_num = 0;

	preProcessScene(  );

	return return_num;
}

//--------------------------------------------------------------------------------
// pushSpecialEffect
//--------------------------------------------------------------------------------
int zz_lua_pushSpecialEffect (lua_State * L)
{
	int param_index = 1;
	const char where[] = "pushSpecialEffect";
	int return_num = 0;

	int iEffectID = get_param_int( L, param_index, where );

	set_param_int( L, return_num, pushSpecialEffect( iEffectID ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// pushTexture
//--------------------------------------------------------------------------------
int zz_lua_pushTexture (lua_State * L)
{
	int param_index = 1;
	const char where[] = "pushTexture";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	ZSTRING pTexturePath = get_param_string( L, param_index, where );

	set_param_int( L, return_num, pushTexture( hMaterial, pTexturePath ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// quaternionToModelDirection
//--------------------------------------------------------------------------------
int zz_lua_quaternionToModelDirection (lua_State * L)
{
	int param_index = 1;
	const char where[] = "quaternionToModelDirection";
	int return_num = 0;

	float fQuatW = get_param_float( L, param_index, where );
	float fQuatX = get_param_float( L, param_index, where );
	float fQuatY = get_param_float( L, param_index, where );
	float fQuatZ = get_param_float( L, param_index, where );

	set_param_float( L, return_num, quaternionToModelDirection( fQuatW, fQuatX, fQuatY, fQuatZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// readLogString
//--------------------------------------------------------------------------------
int zz_lua_readLogString (lua_State * L)
{
	int param_index = 1;
	const char where[] = "readLogString";
	int return_num = 0;

	int iNumLatest = get_param_int( L, param_index, where );
	ZSTRING pStrLineBreakingMsg = get_param_string( L, param_index, where );

	set_param_string( L, return_num, readLogString( iNumLatest, pStrLineBreakingMsg ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// reloadTextures
//--------------------------------------------------------------------------------
int zz_lua_reloadTextures (lua_State * L)
{
	int param_index = 1;
	const char where[] = "reloadTextures";
	int return_num = 0;


	set_param_int( L, return_num, reloadTextures( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// removeFromScene
//--------------------------------------------------------------------------------
int zz_lua_removeFromScene (lua_State * L)
{
	int param_index = 1;
	const char where[] = "removeFromScene";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, removeFromScene( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// renderNode
//--------------------------------------------------------------------------------
int zz_lua_renderNode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "renderNode";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, renderNode( hNode ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// renderScene
//--------------------------------------------------------------------------------
int zz_lua_renderScene (lua_State * L)
{
	int param_index = 1;
	const char where[] = "renderScene";
	int return_num = 0;

	renderScene(  );

	return return_num;
}

//--------------------------------------------------------------------------------
// resetScreen
//--------------------------------------------------------------------------------
int zz_lua_resetScreen (lua_State * L)
{
	int param_index = 1;
	const char where[] = "resetScreen";
	int return_num = 0;

	resetScreen(  );

	return return_num;
}

//--------------------------------------------------------------------------------
// returnHNODE
//--------------------------------------------------------------------------------
int zz_lua_returnHNODE (lua_State * L)
{
	int param_index = 1;
	const char where[] = "returnHNODE";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, returnHNODE( hNode ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// rotateAxis
//--------------------------------------------------------------------------------
int zz_lua_rotateAxis (lua_State * L)
{
	int param_index = 1;
	const char where[] = "rotateAxis";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float fAngleDegree = get_param_float( L, param_index, where );
	float fAxisX = get_param_float( L, param_index, where );
	float fAxisY = get_param_float( L, param_index, where );
	float fAxisZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, rotateAxis( hVisible, fAngleDegree, fAxisX, fAxisY, fAxisZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// rotateByVectorAbsoluteScript
//--------------------------------------------------------------------------------
int zz_lua_rotateByVectorAbsoluteScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "rotateByVectorAbsoluteScript";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float fStartX = get_param_float( L, param_index, where );
	float fStartY = get_param_float( L, param_index, where );
	float fStartZ = get_param_float( L, param_index, where );
	float fEndX = get_param_float( L, param_index, where );
	float fEndY = get_param_float( L, param_index, where );
	float fEndZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, rotateByVectorAbsoluteScript( hVisible, fStartX, fStartY, fStartZ, fEndX, fEndY, fEndZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// rotateByVectorRelativeScript
//--------------------------------------------------------------------------------
int zz_lua_rotateByVectorRelativeScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "rotateByVectorRelativeScript";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float fLocalStartAxisX = get_param_float( L, param_index, where );
	float fLocalStartAxisY = get_param_float( L, param_index, where );
	float fLocalStartAxisZ = get_param_float( L, param_index, where );
	float fWorldEndTargetX = get_param_float( L, param_index, where );
	float fWorldEndTargetY = get_param_float( L, param_index, where );
	float fWorldEndTargetZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, rotateByVectorRelativeScript( hVisible, fLocalStartAxisX, fLocalStartAxisY, fLocalStartAxisZ, fWorldEndTargetX, fWorldEndTargetY, fWorldEndTargetZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// rotateCamera
//--------------------------------------------------------------------------------
int zz_lua_rotateCamera (lua_State * L)
{
	int param_index = 1;
	const char where[] = "rotateCamera";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	int AxisType = get_param_int( L, param_index, where );
	float AngleDegree = get_param_float( L, param_index, where );

	set_param_int( L, return_num, rotateCamera( hCamera, AxisType, AngleDegree ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// rotateTrackball
//--------------------------------------------------------------------------------
int zz_lua_rotateTrackball (lua_State * L)
{
	int param_index = 1;
	const char where[] = "rotateTrackball";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float ScreenX = get_param_float( L, param_index, where );
	float ScreenY = get_param_float( L, param_index, where );

	set_param_int( L, return_num, rotateTrackball( hCamera, ScreenX, ScreenY ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// saveCamera
//--------------------------------------------------------------------------------
int zz_lua_saveCamera (lua_State * L)
{
	int param_index = 1;
	const char where[] = "saveCamera";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	ZSTRING pCameraPath = get_param_string( L, param_index, where );

	set_param_int( L, return_num, saveCamera( hCamera, pCameraPath ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// saveMesh
//--------------------------------------------------------------------------------
int zz_lua_saveMesh (lua_State * L)
{
	int param_index = 1;
	const char where[] = "saveMesh";
	int return_num = 0;

	HNODE hMesh = get_param_uint( L, param_index, where );
	ZSTRING pSavePath = get_param_string( L, param_index, where );
	int bTextMode = get_param_int( L, param_index, where );

	set_param_int( L, return_num, saveMesh( hMesh, pSavePath, bTextMode ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// savePrevPosition
//--------------------------------------------------------------------------------
int zz_lua_savePrevPosition (lua_State * L)
{
	int param_index = 1;
	const char where[] = "savePrevPosition";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, savePrevPosition( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// saveScreenshots
//--------------------------------------------------------------------------------
int zz_lua_saveScreenshots (lua_State * L)
{
	int param_index = 1;
	const char where[] = "saveScreenshots";
	int return_num = 0;

	int bStart = get_param_int( L, param_index, where );
	int iFileType = get_param_int( L, param_index, where );
	int iNumSkipFrame = get_param_int( L, param_index, where );
	saveScreenshots( bStart, iFileType, iNumSkipFrame  );

	return return_num;
}

//--------------------------------------------------------------------------------
// saveToBMP
//--------------------------------------------------------------------------------
int zz_lua_saveToBMP (lua_State * L)
{
	int param_index = 1;
	const char where[] = "saveToBMP";
	int return_num = 0;

	ZSTRING pFileNameBMP = get_param_string( L, param_index, where );

	set_param_int( L, return_num, saveToBMP( pFileNameBMP ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// saveToDDS
//--------------------------------------------------------------------------------
int zz_lua_saveToDDS (lua_State * L)
{
	int param_index = 1;
	const char where[] = "saveToDDS";
	int return_num = 0;

	ZSTRING pFileNameDDS = get_param_string( L, param_index, where );

	set_param_int( L, return_num, saveToDDS( pFileNameDDS ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// selectNode
//--------------------------------------------------------------------------------
int zz_lua_selectNode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "selectNode";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, selectNode( hNode ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setAdapter
//--------------------------------------------------------------------------------
int zz_lua_setAdapter (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setAdapter";
	int return_num = 0;

	int iAdapterIndex = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setAdapter( iAdapterIndex ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setAlphaFogRange
//--------------------------------------------------------------------------------
int zz_lua_setAlphaFogRange (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setAlphaFogRange";
	int return_num = 0;

	float rangeStart = get_param_float( L, param_index, where );
	float rangeEnd = get_param_float( L, param_index, where );
	setAlphaFogRange( rangeStart, rangeEnd  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setAnimatableFrame
//--------------------------------------------------------------------------------
int zz_lua_setAnimatableFrame (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setAnimatableFrame";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );
	int iFrame = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setAnimatableFrame( hAnimatable, iFrame ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setAnimatableSpeed
//--------------------------------------------------------------------------------
int zz_lua_setAnimatableSpeed (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setAnimatableSpeed";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );
	float fSpeed = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setAnimatableSpeed( hAnimatable, fSpeed ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setAnimatableTime
//--------------------------------------------------------------------------------
int zz_lua_setAnimatableTime (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setAnimatableTime";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );
	int iTimeMilliSecond = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setAnimatableTime( hAnimatable, iTimeMilliSecond ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setAxisAngle
//--------------------------------------------------------------------------------
int zz_lua_setAxisAngle (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setAxisAngle";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float AngleDegree = get_param_float( L, param_index, where );
	float AxisX = get_param_float( L, param_index, where );
	float AxisY = get_param_float( L, param_index, where );
	float AxisZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setAxisAngle( hVisible, AngleDegree, AxisX, AxisY, AxisZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setBillboard
//--------------------------------------------------------------------------------
int zz_lua_setBillboard (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setBillboard";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int bUseBillboard = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setBillboard( hVisible, bUseBillboard ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setBillboardOneAxis
//--------------------------------------------------------------------------------
int zz_lua_setBillboardOneAxis (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setBillboardOneAxis";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int bUseBillboard = get_param_int( L, param_index, where );
	int iRotationAxis = get_param_int( L, param_index, where );
	int iDirectionAxis = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setBillboardOneAxis( hVisible, bUseBillboard, iRotationAxis, iDirectionAxis ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setBlendFactor
//--------------------------------------------------------------------------------
int zz_lua_setBlendFactor (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setBlendFactor";
	int return_num = 0;

	float fFactor = get_param_float( L, param_index, where );

	set_param_float( L, return_num, setBlendFactor( fFactor ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setBuffer
//--------------------------------------------------------------------------------
int zz_lua_setBuffer (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setBuffer";
	int return_num = 0;

	int Width = get_param_int( L, param_index, where );
	int Height = get_param_int( L, param_index, where );
	int Depth = get_param_int( L, param_index, where );
	setBuffer( Width, Height, Depth  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraAspectRatio
//--------------------------------------------------------------------------------
int zz_lua_setCameraAspectRatio (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraAspectRatio";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float AspectRatio = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setCameraAspectRatio( hCamera, AspectRatio ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraDefault
//--------------------------------------------------------------------------------
int zz_lua_setCameraDefault (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraDefault";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, setCameraDefault( hCamera ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraFollowDistance
//--------------------------------------------------------------------------------
int zz_lua_setCameraFollowDistance (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraFollowDistance";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float fDistance = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setCameraFollowDistance( hCamera, fDistance ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraFollowDistanceRange
//--------------------------------------------------------------------------------
int zz_lua_setCameraFollowDistanceRange (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraFollowDistanceRange";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float fMinDistance = get_param_float( L, param_index, where );
	float fMaxDistance = get_param_float( L, param_index, where );
	setCameraFollowDistanceRange( hCamera, fMinDistance, fMaxDistance  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraFollowMode
//--------------------------------------------------------------------------------
int zz_lua_setCameraFollowMode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraFollowMode";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	int mode_Look0_Back1 = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setCameraFollowMode( hCamera, mode_Look0_Back1 ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraFollowPitch
//--------------------------------------------------------------------------------
int zz_lua_setCameraFollowPitch (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraFollowPitch";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float fPitch = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setCameraFollowPitch( hCamera, fPitch ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraFollowYaw
//--------------------------------------------------------------------------------
int zz_lua_setCameraFollowYaw (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraFollowYaw";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float fYawDeg = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setCameraFollowYaw( hCamera, fYawDeg ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraFov
//--------------------------------------------------------------------------------
int zz_lua_setCameraFov (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraFov";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float fFovY = get_param_float( L, param_index, where );
	setCameraFov( hCamera, fFovY  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraLight
//--------------------------------------------------------------------------------
int zz_lua_setCameraLight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraLight";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );

	set_param_uint( L, return_num, setCameraLight( hCamera ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraOrthogonal
//--------------------------------------------------------------------------------
int zz_lua_setCameraOrthogonal (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraOrthogonal";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float fWidth = get_param_float( L, param_index, where );
	float fHeight = get_param_float( L, param_index, where );
	float fNear = get_param_float( L, param_index, where );
	float fFar = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setCameraOrthogonal( hCamera, fWidth, fHeight, fNear, fFar ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraPerspective
//--------------------------------------------------------------------------------
int zz_lua_setCameraPerspective (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraPerspective";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float fFovY = get_param_float( L, param_index, where );
	float fAspectRatio = get_param_float( L, param_index, where );
	float fNear = get_param_float( L, param_index, where );
	float fFar = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setCameraPerspective( hCamera, fFovY, fAspectRatio, fNear, fFar ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraTargetHeight
//--------------------------------------------------------------------------------
int zz_lua_setCameraTargetHeight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraTargetHeight";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );
	float fHeight = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setCameraTargetHeight( hCamera, fHeight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCameraTransparency
//--------------------------------------------------------------------------------
int zz_lua_setCameraTransparency (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCameraTransparency";
	int return_num = 0;

	float fTransparency = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setCameraTransparency( fTransparency ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCastShadow
//--------------------------------------------------------------------------------
int zz_lua_setCastShadow (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCastShadow";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int hCastShadow = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setCastShadow( hVisible, hCastShadow ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setClearColor
//--------------------------------------------------------------------------------
int zz_lua_setClearColor (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setClearColor";
	int return_num = 0;

	float fClearColorX = get_param_float( L, param_index, where );
	float fClearColorY = get_param_float( L, param_index, where );
	float fClearColorZ = get_param_float( L, param_index, where );
	setClearColor( fClearColorX, fClearColorY, fClearColorZ  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setCollisionLevel
//--------------------------------------------------------------------------------
int zz_lua_setCollisionLevel (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setCollisionLevel";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iLevel = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setCollisionLevel( hVisible, iLevel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setDataPath
//--------------------------------------------------------------------------------
int zz_lua_setDataPath (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setDataPath";
	int return_num = 0;

	ZSTRING pDataPath = get_param_string( L, param_index, where );
	setDataPath( pDataPath  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setDefaultLight
//--------------------------------------------------------------------------------
int zz_lua_setDefaultLight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setDefaultLight";
	int return_num = 0;

	HNODE hLight = get_param_uint( L, param_index, where );
	setDefaultLight( hLight  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setDelayedLoad
//--------------------------------------------------------------------------------
int zz_lua_setDelayedLoad (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setDelayedLoad";
	int return_num = 0;

	int iDelayedLoad = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setDelayedLoad( iDelayedLoad ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setDeltaTime
//--------------------------------------------------------------------------------
int zz_lua_setDeltaTime (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setDeltaTime";
	int return_num = 0;

	int iMsecDelta = get_param_int( L, param_index, where );
	setDeltaTime( iMsecDelta  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setDisplayQualityLevel
//--------------------------------------------------------------------------------
int zz_lua_setDisplayQualityLevel (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setDisplayQualityLevel";
	int return_num = 0;

	int iLevel = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setDisplayQualityLevel( iLevel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setDrawPriority
//--------------------------------------------------------------------------------
int zz_lua_setDrawPriority (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setDrawPriority";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iPriority = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setDrawPriority( hVisible, iPriority ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setDrawShadowmapViewport
//--------------------------------------------------------------------------------
int zz_lua_setDrawShadowmapViewport (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setDrawShadowmapViewport";
	int return_num = 0;

	int bDraw = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setDrawShadowmapViewport( bDraw ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setExcludeClasses
//--------------------------------------------------------------------------------
int zz_lua_setExcludeClasses (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setExcludeClasses";
	int return_num = 0;

	int iExcludeClasses = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setExcludeClasses( iExcludeClasses ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setFileSytem
//--------------------------------------------------------------------------------
int zz_lua_setFileSytem (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setFileSytem";
	int return_num = 0;

	HNODE hVFS = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, setFileSytem( hVFS ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setFloatArray
//--------------------------------------------------------------------------------
int zz_lua_setFloatArray (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setFloatArray";
	int return_num = 0;

	int iIndex = get_param_int( L, param_index, where );
	float fNewFloat = get_param_float( L, param_index, where );

	set_param_float( L, return_num, setFloatArray( iIndex, fNewFloat ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setFogColor
//--------------------------------------------------------------------------------
int zz_lua_setFogColor (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setFogColor";
	int return_num = 0;

	float colorR = get_param_float( L, param_index, where );
	float colorG = get_param_float( L, param_index, where );
	float colorB = get_param_float( L, param_index, where );
	setFogColor( colorR, colorG, colorB  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setFogRange
//--------------------------------------------------------------------------------
int zz_lua_setFogRange (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setFogRange";
	int return_num = 0;

	float rangeStart = get_param_float( L, param_index, where );
	float rangeEnd = get_param_float( L, param_index, where );
	setFogRange( rangeStart, rangeEnd  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setFontColor
//--------------------------------------------------------------------------------
int zz_lua_setFontColor (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setFontColor";
	int return_num = 0;

	HNODE hFont = get_param_uint( L, param_index, where );
	int iRed = get_param_int( L, param_index, where );
	int iGreen = get_param_int( L, param_index, where );
	int iBlue = get_param_int( L, param_index, where );
	int iAlpha = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setFontColor( hFont, iRed, iGreen, iBlue, iAlpha ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setFontOutlineColor
//--------------------------------------------------------------------------------
int zz_lua_setFontOutlineColor (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setFontOutlineColor";
	int return_num = 0;

	HNODE hFont = get_param_uint( L, param_index, where );
	int iRed = get_param_int( L, param_index, where );
	int iGreen = get_param_int( L, param_index, where );
	int iBlue = get_param_int( L, param_index, where );
	int iAlpha = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setFontOutlineColor( hFont, iRed, iGreen, iBlue, iAlpha ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setFramerateRange
//--------------------------------------------------------------------------------
int zz_lua_setFramerateRange (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setFramerateRange";
	int return_num = 0;

	int iMinFramerate = get_param_int( L, param_index, where );
	int iMaxFramerate = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setFramerateRange( iMinFramerate, iMaxFramerate ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setFullSceneAntiAliasing
//--------------------------------------------------------------------------------
int zz_lua_setFullSceneAntiAliasing (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setFullSceneAntiAliasing";
	int return_num = 0;

	int Type = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setFullSceneAntiAliasing( Type ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setFullSceneGlowColor
//--------------------------------------------------------------------------------
int zz_lua_setFullSceneGlowColor (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setFullSceneGlowColor";
	int return_num = 0;

	float fColorR = get_param_float( L, param_index, where );
	float fColorG = get_param_float( L, param_index, where );
	float fColorB = get_param_float( L, param_index, where );
	setFullSceneGlowColor( fColorR, fColorG, fColorB  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setFullSceneGlowType
//--------------------------------------------------------------------------------
int zz_lua_setFullSceneGlowType (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setFullSceneGlowType";
	int return_num = 0;

	int iType = get_param_int( L, param_index, where );
	setFullSceneGlowType( iType  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setGammaValue
//--------------------------------------------------------------------------------
int zz_lua_setGammaValue (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setGammaValue";
	int return_num = 0;

	float fGammaValue = get_param_float( L, param_index, where );
	setGammaValue( fGammaValue  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setGlowColor
//--------------------------------------------------------------------------------
int zz_lua_setGlowColor (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setGlowColor";
	int return_num = 0;

	float fColorR = get_param_float( L, param_index, where );
	float fColorG = get_param_float( L, param_index, where );
	float fColorB = get_param_float( L, param_index, where );
	setGlowColor( fColorR, fColorG, fColorB  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setGlowmapSize
//--------------------------------------------------------------------------------
int zz_lua_setGlowmapSize (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setGlowmapSize";
	int return_num = 0;

	int iSize = get_param_int( L, param_index, where );
	setGlowmapSize( iSize  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setGravityScript
//--------------------------------------------------------------------------------
int zz_lua_setGravityScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setGravityScript";
	int return_num = 0;

	float fGravityX = get_param_float( L, param_index, where );
	float fGravityY = get_param_float( L, param_index, where );
	float fGravityZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setGravityScript( fGravityX, fGravityY, fGravityZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setIncludeClasses
//--------------------------------------------------------------------------------
int zz_lua_setIncludeClasses (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setIncludeClasses";
	int return_num = 0;

	int iIncludeClasses = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setIncludeClasses( iIncludeClasses ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setLazyBufferSize
//--------------------------------------------------------------------------------
int zz_lua_setLazyBufferSize (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setLazyBufferSize";
	int return_num = 0;

	int iTextureSize = get_param_int( L, param_index, where );
	int iNormalMeshSize = get_param_int( L, param_index, where );
	int iTerrainMeshSize = get_param_int( L, param_index, where );
	int iOceanMeshSize = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setLazyBufferSize( iTextureSize, iNormalMeshSize, iTerrainMeshSize, iOceanMeshSize ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setLight
//--------------------------------------------------------------------------------
int zz_lua_setLight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setLight";
	int return_num = 0;

	HNODE hLight = get_param_uint( L, param_index, where );
	ZSTRING pProperty = get_param_string( L, param_index, where );
	float fValue1 = get_param_float( L, param_index, where );
	float fValue2 = get_param_float( L, param_index, where );
	float fValue3 = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setLight( hLight, pProperty, fValue1, fValue2, fValue3 ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setLightmapBlendStyle
//--------------------------------------------------------------------------------
int zz_lua_setLightmapBlendStyle (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setLightmapBlendStyle";
	int return_num = 0;

	int iBlendStyle = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setLightmapBlendStyle( iBlendStyle ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMagFilter
//--------------------------------------------------------------------------------
int zz_lua_setMagFilter (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMagFilter";
	int return_num = 0;

	int FilterType = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMagFilter( FilterType ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialAlphaRef
//--------------------------------------------------------------------------------
int zz_lua_setMaterialAlphaRef (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialAlphaRef";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int iAlphaRef = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaterialAlphaRef( hMaterial, iAlphaRef ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialAlphaValue
//--------------------------------------------------------------------------------
int zz_lua_setMaterialAlphaValue (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialAlphaValue";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	float fAlpha = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setMaterialAlphaValue( hMaterial, fAlpha ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialBlendType
//--------------------------------------------------------------------------------
int zz_lua_setMaterialBlendType (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialBlendType";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int iBlendType = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaterialBlendType( hMaterial, iBlendType ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialBlendTypeCustom
//--------------------------------------------------------------------------------
int zz_lua_setMaterialBlendTypeCustom (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialBlendTypeCustom";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int iBlendSrc = get_param_int( L, param_index, where );
	int iBlendDest = get_param_int( L, param_index, where );
	int iBlendOp = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaterialBlendTypeCustom( hMaterial, iBlendSrc, iBlendDest, iBlendOp ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialGlow
//--------------------------------------------------------------------------------
int zz_lua_setMaterialGlow (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialGlow";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int iGlowType = get_param_int( L, param_index, where );
	float fRed = get_param_float( L, param_index, where );
	float fGreen = get_param_float( L, param_index, where );
	float fBlue = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setMaterialGlow( hMaterial, iGlowType, fRed, fGreen, fBlue ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialLightmap
//--------------------------------------------------------------------------------
int zz_lua_setMaterialLightmap (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialLightmap";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	ZSTRING pLightmapFilename = get_param_string( L, param_index, where );
	int iX = get_param_int( L, param_index, where );
	int iY = get_param_int( L, param_index, where );
	int iWidth = get_param_int( L, param_index, where );
	int iHeight = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaterialLightmap( hMaterial, pLightmapFilename, iX, iY, iWidth, iHeight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialObjectAlpha
//--------------------------------------------------------------------------------
int zz_lua_setMaterialObjectAlpha (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialObjectAlpha";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	float fAlpha = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setMaterialObjectAlpha( hMaterial, fAlpha ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialShader
//--------------------------------------------------------------------------------
int zz_lua_setMaterialShader (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialShader";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	HNODE hShader = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, setMaterialShader( hMaterial, hShader ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialTextureAddress
//--------------------------------------------------------------------------------
int zz_lua_setMaterialTextureAddress (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialTextureAddress";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int iStage = get_param_int( L, param_index, where );
	int iTextureAddress = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaterialTextureAddress( hMaterial, iStage, iTextureAddress ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialUseAlpha
//--------------------------------------------------------------------------------
int zz_lua_setMaterialUseAlpha (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialUseAlpha";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int bUseAlpha = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaterialUseAlpha( hMaterial, bUseAlpha ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialUseAlphaTest
//--------------------------------------------------------------------------------
int zz_lua_setMaterialUseAlphaTest (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialUseAlphaTest";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int bUseAlphaTest = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaterialUseAlphaTest( hMaterial, bUseAlphaTest ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialUseLight
//--------------------------------------------------------------------------------
int zz_lua_setMaterialUseLight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialUseLight";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int bUseLight = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaterialUseLight( hMaterial, bUseLight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialUseSpecular
//--------------------------------------------------------------------------------
int zz_lua_setMaterialUseSpecular (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialUseSpecular";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int bUseSpecular = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaterialUseSpecular( hMaterial, bUseSpecular ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialUseTwoSide
//--------------------------------------------------------------------------------
int zz_lua_setMaterialUseTwoSide (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialUseTwoSide";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int bUseTwoSide = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaterialUseTwoSide( hMaterial, bUseTwoSide ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialZTest
//--------------------------------------------------------------------------------
int zz_lua_setMaterialZTest (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialZTest";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int bZTest = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaterialZTest( hMaterial, bZTest ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaterialZWrite
//--------------------------------------------------------------------------------
int zz_lua_setMaterialZWrite (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaterialZWrite";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );
	int bZWrite = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaterialZWrite( hMaterial, bZWrite ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMaxSimultaneousBone
//--------------------------------------------------------------------------------
int zz_lua_setMaxSimultaneousBone (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMaxSimultaneousBone";
	int return_num = 0;

	int iMaxBone = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMaxSimultaneousBone( iMaxBone ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMeshNumClipFaces
//--------------------------------------------------------------------------------
int zz_lua_setMeshNumClipFaces (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMeshNumClipFaces";
	int return_num = 0;

	HNODE hMesh = get_param_uint( L, param_index, where );
	int iNumClipFaces = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMeshNumClipFaces( hMesh, iNumClipFaces ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMeshType
//--------------------------------------------------------------------------------
int zz_lua_setMeshType (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMeshType";
	int return_num = 0;

	HNODE hMesh = get_param_uint( L, param_index, where );
	int bDynamic = get_param_int( L, param_index, where );
	setMeshType( hMesh, bDynamic  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMinFilter
//--------------------------------------------------------------------------------
int zz_lua_setMinFilter (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMinFilter";
	int return_num = 0;

	int FilterType = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMinFilter( FilterType ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMipmapFilter
//--------------------------------------------------------------------------------
int zz_lua_setMipmapFilter (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMipmapFilter";
	int return_num = 0;

	int FilterType = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMipmapFilter( FilterType ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMipmapLevel
//--------------------------------------------------------------------------------
int zz_lua_setMipmapLevel (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMipmapLevel";
	int return_num = 0;

	int Level = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMipmapLevel( Level ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setModelDirection
//--------------------------------------------------------------------------------
int zz_lua_setModelDirection (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setModelDirection";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );
	float fAngleDegree = get_param_float( L, param_index, where );
	int bImmediate = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setModelDirection( hModel, fAngleDegree, bImmediate ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setModelDirectionByPosition
//--------------------------------------------------------------------------------
int zz_lua_setModelDirectionByPosition (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setModelDirectionByPosition";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );
	float fX = get_param_float( L, param_index, where );
	float fY = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setModelDirectionByPosition( hModel, fX, fY ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setModelMoveVelocity
//--------------------------------------------------------------------------------
int zz_lua_setModelMoveVelocity (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setModelMoveVelocity";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );
	float fVelocity = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setModelMoveVelocity( hModel, fVelocity ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMonitorRefreshRate
//--------------------------------------------------------------------------------
int zz_lua_setMonitorRefreshRate (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMonitorRefreshRate";
	int return_num = 0;

	int iRefreshRate = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMonitorRefreshRate( iRefreshRate ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMotionInterpolationRange
//--------------------------------------------------------------------------------
int zz_lua_setMotionInterpolationRange (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMotionInterpolationRange";
	int return_num = 0;

	float fDistanceFromCamera = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setMotionInterpolationRange( fDistanceFromCamera ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setMotionInterporationInterval
//--------------------------------------------------------------------------------
int zz_lua_setMotionInterporationInterval (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setMotionInterporationInterval";
	int return_num = 0;

	HNODE hMotion = get_param_uint( L, param_index, where );
	int iMilliSeconds = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setMotionInterporationInterval( hMotion, iMilliSeconds ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setName
//--------------------------------------------------------------------------------
int zz_lua_setName (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setName";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );
	ZSTRING pNewName = get_param_string( L, param_index, where );

	set_param_int( L, return_num, setName( hNode, pNewName ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setObbox
//--------------------------------------------------------------------------------
int zz_lua_setObbox (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setObbox";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float LocalCenterX = get_param_float( L, param_index, where );
	float LocalCenterY = get_param_float( L, param_index, where );
	float LocalCenterZ = get_param_float( L, param_index, where );
	float HalfLengthX = get_param_float( L, param_index, where );
	float HalfLengthY = get_param_float( L, param_index, where );
	float HalfLengthZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setObbox( hVisible, LocalCenterX, LocalCenterY, LocalCenterZ, HalfLengthX, HalfLengthY, HalfLengthZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setOceanBlockInterval
//--------------------------------------------------------------------------------
int zz_lua_setOceanBlockInterval (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setOceanBlockInterval";
	int return_num = 0;

	HNODE hOceanBlock = get_param_uint( L, param_index, where );
	int iIntervalMilliSecond = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setOceanBlockInterval( hOceanBlock, iIntervalMilliSecond ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setPosition
//--------------------------------------------------------------------------------
int zz_lua_setPosition (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setPosition";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float PositionX = get_param_float( L, param_index, where );
	float PositionY = get_param_float( L, param_index, where );
	float PositionZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setPosition( hVisible, PositionX, PositionY, PositionZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setQuaternion
//--------------------------------------------------------------------------------
int zz_lua_setQuaternion (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setQuaternion";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float qW = get_param_float( L, param_index, where );
	float qX = get_param_float( L, param_index, where );
	float qY = get_param_float( L, param_index, where );
	float qZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setQuaternion( hVisible, qW, qX, qY, qZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setReceiveFog
//--------------------------------------------------------------------------------
int zz_lua_setReceiveFog (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setReceiveFog";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int hUseFog = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setReceiveFog( hVisible, hUseFog ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setReceiveShadow
//--------------------------------------------------------------------------------
int zz_lua_setReceiveShadow (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setReceiveShadow";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int hReceiveShadow = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setReceiveShadow( hVisible, hReceiveShadow ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setRendererMagFilter
//--------------------------------------------------------------------------------
int zz_lua_setRendererMagFilter (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setRendererMagFilter";
	int return_num = 0;

	int iFilter = get_param_int( L, param_index, where );
	setRendererMagFilter( iFilter  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setRendererMinFilter
//--------------------------------------------------------------------------------
int zz_lua_setRendererMinFilter (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setRendererMinFilter";
	int return_num = 0;

	int iFilter = get_param_int( L, param_index, where );
	setRendererMinFilter( iFilter  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setRepeatCount
//--------------------------------------------------------------------------------
int zz_lua_setRepeatCount (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setRepeatCount";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );
	int iRepeatCount = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setRepeatCount( hAnimatable, iRepeatCount ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setScale
//--------------------------------------------------------------------------------
int zz_lua_setScale (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setScale";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float ScaleX = get_param_float( L, param_index, where );
	float ScaleY = get_param_float( L, param_index, where );
	float ScaleZ = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setScale( hVisible, ScaleX, ScaleY, ScaleZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setScreen
//--------------------------------------------------------------------------------
int zz_lua_setScreen (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setScreen";
	int return_num = 0;

	int Width = get_param_int( L, param_index, where );
	int Height = get_param_int( L, param_index, where );
	int Depth = get_param_int( L, param_index, where );
	int bUseFullScreen = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setScreen( Width, Height, Depth, bUseFullScreen ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setShaderFormat
//--------------------------------------------------------------------------------
int zz_lua_setShaderFormat (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setShaderFormat";
	int return_num = 0;

	HNODE hShader = get_param_uint( L, param_index, where );
	ZSTRING pVertexShaderPath = get_param_string( L, param_index, where );
	ZSTRING pPixelShaderPath = get_param_string( L, param_index, where );
	int iFormat = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setShaderFormat( hShader, pVertexShaderPath, pPixelShaderPath, iFormat ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setShadowmapBlurType
//--------------------------------------------------------------------------------
int zz_lua_setShadowmapBlurType (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setShadowmapBlurType";
	int return_num = 0;

	int iBlurType = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setShadowmapBlurType( iBlurType ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setShadowmapColor
//--------------------------------------------------------------------------------
int zz_lua_setShadowmapColor (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setShadowmapColor";
	int return_num = 0;

	float fColorR = get_param_float( L, param_index, where );
	float fColorG = get_param_float( L, param_index, where );
	float fColorB = get_param_float( L, param_index, where );
	setShadowmapColor( fColorR, fColorG, fColorB  );

	return return_num;
}

//--------------------------------------------------------------------------------
// setShadowmapSize
//--------------------------------------------------------------------------------
int zz_lua_setShadowmapSize (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setShadowmapSize";
	int return_num = 0;

	int iSize = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setShadowmapSize( iSize ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setSkyMaterialBlendRatio
//--------------------------------------------------------------------------------
int zz_lua_setSkyMaterialBlendRatio (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setSkyMaterialBlendRatio";
	int return_num = 0;

	HNODE hMat = get_param_uint( L, param_index, where );
	float fBlendRatio = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setSkyMaterialBlendRatio( hMat, fBlendRatio ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setSkyRotationSpeed
//--------------------------------------------------------------------------------
int zz_lua_setSkyRotationSpeed (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setSkyRotationSpeed";
	int return_num = 0;

	HNODE hSky = get_param_uint( L, param_index, where );
	int iSkyUnit = get_param_int( L, param_index, where );
	float fAngleDegreePerSecond = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setSkyRotationSpeed( hSky, iSkyUnit, fAngleDegreePerSecond ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setStartDelay
//--------------------------------------------------------------------------------
int zz_lua_setStartDelay (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setStartDelay";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );
	int iDelayMilliSecond = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setStartDelay( hAnimatable, iDelayMilliSecond ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setTextureLoadingFormat
//--------------------------------------------------------------------------------
int zz_lua_setTextureLoadingFormat (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setTextureLoadingFormat";
	int return_num = 0;

	int iFormat = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setTextureLoadingFormat( iFormat ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setTextureLoadingScale
//--------------------------------------------------------------------------------
int zz_lua_setTextureLoadingScale (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setTextureLoadingScale";
	int return_num = 0;

	int iScale = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setTextureLoadingScale( iScale ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setTimeDelay
//--------------------------------------------------------------------------------
int zz_lua_setTimeDelay (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setTimeDelay";
	int return_num = 0;

	int Delay = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setTimeDelay( Delay ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setUseFixedFramerate
//--------------------------------------------------------------------------------
int zz_lua_setUseFixedFramerate (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setUseFixedFramerate";
	int return_num = 0;

	int bTrueOrFalse = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setUseFixedFramerate( bTrueOrFalse ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setUseTimeWeight
//--------------------------------------------------------------------------------
int zz_lua_setUseTimeWeight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setUseTimeWeight";
	int return_num = 0;

	int bTrueOrFalse = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setUseTimeWeight( bTrueOrFalse ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setUserData
//--------------------------------------------------------------------------------
int zz_lua_setUserData (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setUserData";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	HNODE hData = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, setUserData( hVisible, hData ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setVisibility
//--------------------------------------------------------------------------------
int zz_lua_setVisibility (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setVisibility";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float fVisibility = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setVisibility( hVisible, fVisibility ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setVisibilityRecursive
//--------------------------------------------------------------------------------
int zz_lua_setVisibilityRecursive (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setVisibilityRecursive";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float fVisibility = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setVisibilityRecursive( hVisible, fVisibility ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setVisibleClipFace
//--------------------------------------------------------------------------------
int zz_lua_setVisibleClipFace (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setVisibleClipFace";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iClipFace = get_param_int( L, param_index, where );

	set_param_int( L, return_num, setVisibleClipFace( hVisible, iClipFace ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setVisibleGlow
//--------------------------------------------------------------------------------
int zz_lua_setVisibleGlow (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setVisibleGlow";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iGlowType = get_param_int( L, param_index, where );
	float fRed = get_param_float( L, param_index, where );
	float fGreen = get_param_float( L, param_index, where );
	float fBlue = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setVisibleGlow( hVisible, iGlowType, fRed, fGreen, fBlue ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setVisibleGlowRecursive
//--------------------------------------------------------------------------------
int zz_lua_setVisibleGlowRecursive (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setVisibleGlowRecursive";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iGlowType = get_param_int( L, param_index, where );
	float fRed = get_param_float( L, param_index, where );
	float fGreen = get_param_float( L, param_index, where );
	float fBlue = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setVisibleGlowRecursive( hVisible, iGlowType, fRed, fGreen, fBlue ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setVisibleJump
//--------------------------------------------------------------------------------
int zz_lua_setVisibleJump (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setVisibleJump";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float fJumpForce = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setVisibleJump( hVisible, fJumpForce ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setVisibleLight
//--------------------------------------------------------------------------------
int zz_lua_setVisibleLight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setVisibleLight";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iRenderUnit = get_param_int( L, param_index, where );
	HNODE hLight = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, setVisibleLight( hVisible, iRenderUnit, hLight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setVisibleMaterial
//--------------------------------------------------------------------------------
int zz_lua_setVisibleMaterial (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setVisibleMaterial";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iRenderUnit = get_param_int( L, param_index, where );
	HNODE hMaterial = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, setVisibleMaterial( hVisible, iRenderUnit, hMaterial ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setVisibleMesh
//--------------------------------------------------------------------------------
int zz_lua_setVisibleMesh (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setVisibleMesh";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iRenderUnit = get_param_int( L, param_index, where );
	HNODE hMesh = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, setVisibleMesh( hVisible, iRenderUnit, hMesh ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setVisibleRangeFromCamera
//--------------------------------------------------------------------------------
int zz_lua_setVisibleRangeFromCamera (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setVisibleRangeFromCamera";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	float fDistanceFromCameraStart = get_param_float( L, param_index, where );
	float fDistanceFromCameraEnd = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setVisibleRangeFromCamera( hVisible, fDistanceFromCameraStart, fDistanceFromCameraEnd ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setVisibleRenderUnitGlow
//--------------------------------------------------------------------------------
int zz_lua_setVisibleRenderUnitGlow (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setVisibleRenderUnitGlow";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iRenderUnit = get_param_int( L, param_index, where );
	int iGlowType = get_param_int( L, param_index, where );
	float fRed = get_param_float( L, param_index, where );
	float fGreen = get_param_float( L, param_index, where );
	float fBlue = get_param_float( L, param_index, where );

	set_param_int( L, return_num, setVisibleRenderUnitGlow( hVisible, iRenderUnit, iGlowType, fRed, fGreen, fBlue ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// setWindowText
//--------------------------------------------------------------------------------
int zz_lua_setWindowText (lua_State * L)
{
	int param_index = 1;
	const char where[] = "setWindowText";
	int return_num = 0;

	ZSTRING pTitle = get_param_string( L, param_index, where );
	setWindowText( pTitle  );

	return return_num;
}

//--------------------------------------------------------------------------------
// shootRay
//--------------------------------------------------------------------------------
int zz_lua_shootRay (lua_State * L)
{
	int param_index = 1;
	const char where[] = "shootRay";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int iNearest = get_param_int( L, param_index, where );
	float fOriginX = get_param_float( L, param_index, where );
	float fOriginY = get_param_float( L, param_index, where );
	float fOriginZ = get_param_float( L, param_index, where );
	float fDirX = get_param_float( L, param_index, where );
	float fDirY = get_param_float( L, param_index, where );
	float fDirZ = get_param_float( L, param_index, where );

	set_param_float( L, return_num, shootRay( hVisible, iNearest, fOriginX, fOriginY, fOriginZ, fDirX, fDirY, fDirZ ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// stopSound
//--------------------------------------------------------------------------------
int zz_lua_stopSound (lua_State * L)
{
	int param_index = 1;
	const char where[] = "stopSound";
	int return_num = 0;

	HNODE hSound = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, stopSound( hSound ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// swapBuffers
//--------------------------------------------------------------------------------
int zz_lua_swapBuffers (lua_State * L)
{
	int param_index = 1;
	const char where[] = "swapBuffers";
	int return_num = 0;

	swapBuffers(  );

	return return_num;
}

//--------------------------------------------------------------------------------
// traverseNode
//--------------------------------------------------------------------------------
int zz_lua_traverseNode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "traverseNode";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, traverseNode( hNode ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// turnModel
//--------------------------------------------------------------------------------
int zz_lua_turnModel (lua_State * L)
{
	int param_index = 1;
	const char where[] = "turnModel";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );
	float Angle = get_param_float( L, param_index, where );

	set_param_int( L, return_num, turnModel( hModel, Angle ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unlinkNode
//--------------------------------------------------------------------------------
int zz_lua_unlinkNode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unlinkNode";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unlinkNode( hNode ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unlinkVisibleWorld
//--------------------------------------------------------------------------------
int zz_lua_unlinkVisibleWorld (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unlinkVisibleWorld";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unlinkVisibleWorld( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadAllText
//--------------------------------------------------------------------------------
int zz_lua_unloadAllText (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadAllText";
	int return_num = 0;

	HNODE hFont = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadAllText( hFont ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadAnimatable
//--------------------------------------------------------------------------------
int zz_lua_unloadAnimatable (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadAnimatable";
	int return_num = 0;

	HNODE hAnimatable = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadAnimatable( hAnimatable ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadCamera
//--------------------------------------------------------------------------------
int zz_lua_unloadCamera (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadCamera";
	int return_num = 0;

	HNODE hCamera = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadCamera( hCamera ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadEffect
//--------------------------------------------------------------------------------
int zz_lua_unloadEffect (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadEffect";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadEffect( hNode ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadFont
//--------------------------------------------------------------------------------
int zz_lua_unloadFont (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadFont";
	int return_num = 0;

	HNODE hFont = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadFont( hFont ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadLight
//--------------------------------------------------------------------------------
int zz_lua_unloadLight (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadLight";
	int return_num = 0;

	HNODE hLight = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadLight( hLight ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadMaterial
//--------------------------------------------------------------------------------
int zz_lua_unloadMaterial (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadMaterial";
	int return_num = 0;

	HNODE hMaterial = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadMaterial( hMaterial ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadMesh
//--------------------------------------------------------------------------------
int zz_lua_unloadMesh (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadMesh";
	int return_num = 0;

	HNODE hMesh = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadMesh( hMesh ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadModel
//--------------------------------------------------------------------------------
int zz_lua_unloadModel (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadModel";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadModel( hModel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadMorpher
//--------------------------------------------------------------------------------
int zz_lua_unloadMorpher (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadMorpher";
	int return_num = 0;

	HNODE hMorpher = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadMorpher( hMorpher ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadMotion
//--------------------------------------------------------------------------------
int zz_lua_unloadMotion (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadMotion";
	int return_num = 0;

	HNODE hMotion = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadMotion( hMotion ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadNode
//--------------------------------------------------------------------------------
int zz_lua_unloadNode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadNode";
	int return_num = 0;

	HNODE hModel = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadNode( hModel ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadNodeRecursive
//--------------------------------------------------------------------------------
int zz_lua_unloadNodeRecursive (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadNodeRecursive";
	int return_num = 0;

	HNODE hNode = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadNodeRecursive( hNode ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadOceanBlock
//--------------------------------------------------------------------------------
int zz_lua_unloadOceanBlock (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadOceanBlock";
	int return_num = 0;

	HNODE hOceanBlock = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadOceanBlock( hOceanBlock ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadParticle
//--------------------------------------------------------------------------------
int zz_lua_unloadParticle (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadParticle";
	int return_num = 0;

	HNODE hParticle = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadParticle( hParticle ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadShader
//--------------------------------------------------------------------------------
int zz_lua_unloadShader (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadShader";
	int return_num = 0;

	HNODE hShader = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadShader( hShader ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadSkeleton
//--------------------------------------------------------------------------------
int zz_lua_unloadSkeleton (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadSkeleton";
	int return_num = 0;

	HNODE hSkeleton = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadSkeleton( hSkeleton ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadSky
//--------------------------------------------------------------------------------
int zz_lua_unloadSky (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadSky";
	int return_num = 0;

	HNODE hSky = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadSky( hSky ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadSound
//--------------------------------------------------------------------------------
int zz_lua_unloadSound (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadSound";
	int return_num = 0;

	HNODE hSound = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadSound( hSound ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadTerrainBlock
//--------------------------------------------------------------------------------
int zz_lua_unloadTerrainBlock (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadTerrainBlock";
	int return_num = 0;

	HNODE hTerrainBlock = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadTerrainBlock( hTerrainBlock ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadText
//--------------------------------------------------------------------------------
int zz_lua_unloadText (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadText";
	int return_num = 0;

	HNODE hFont = get_param_uint( L, param_index, where );
	HNODE hText = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadText( hFont, hText ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadTexture
//--------------------------------------------------------------------------------
int zz_lua_unloadTexture (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadTexture";
	int return_num = 0;

	HNODE hTexture = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadTexture( hTexture ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadTrail
//--------------------------------------------------------------------------------
int zz_lua_unloadTrail (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadTrail";
	int return_num = 0;

	HNODE hTrail = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadTrail( hTrail ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// unloadVisible
//--------------------------------------------------------------------------------
int zz_lua_unloadVisible (lua_State * L)
{
	int param_index = 1;
	const char where[] = "unloadVisible";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, unloadVisible( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// updateScene
//--------------------------------------------------------------------------------
int zz_lua_updateScene (lua_State * L)
{
	int param_index = 1;
	const char where[] = "updateScene";
	int return_num = 0;

	updateScene(  );

	return return_num;
}

//--------------------------------------------------------------------------------
// updateSceneTransform
//--------------------------------------------------------------------------------
int zz_lua_updateSceneTransform (lua_State * L)
{
	int param_index = 1;
	const char where[] = "updateSceneTransform";
	int return_num = 0;

	updateSceneTransform(  );

	return return_num;
}

//--------------------------------------------------------------------------------
// updateSoundSystem
//--------------------------------------------------------------------------------
int zz_lua_updateSoundSystem (lua_State * L)
{
	int param_index = 1;
	const char where[] = "updateSoundSystem";
	int return_num = 0;


	set_param_int( L, return_num, updateSoundSystem( ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useCull
//--------------------------------------------------------------------------------
int zz_lua_useCull (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useCull";
	int return_num = 0;

	int bCull = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useCull( bCull ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useDebugDisplay
//--------------------------------------------------------------------------------
int zz_lua_useDebugDisplay (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useDebugDisplay";
	int return_num = 0;

	int bUseDebugDisplay = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useDebugDisplay( bUseDebugDisplay ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useDrawBoundingVolume
//--------------------------------------------------------------------------------
int zz_lua_useDrawBoundingVolume (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useDrawBoundingVolume";
	int return_num = 0;

	int bDraw = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useDrawBoundingVolume( bDraw ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useDrawTextRect
//--------------------------------------------------------------------------------
int zz_lua_useDrawTextRect (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useDrawTextRect";
	int return_num = 0;

	int bDraw = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useDrawTextRect( bDraw ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useDrawViewFrustum
//--------------------------------------------------------------------------------
int zz_lua_useDrawViewFrustum (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useDrawViewFrustum";
	int return_num = 0;

	int bDraw = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useDrawViewFrustum( bDraw ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useFileTimeStamp
//--------------------------------------------------------------------------------
int zz_lua_useFileTimeStamp (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useFileTimeStamp";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useFileTimeStamp( bUse ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useFog
//--------------------------------------------------------------------------------
int zz_lua_useFog (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useFog";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );
	useFog( bUse  );

	return return_num;
}

//--------------------------------------------------------------------------------
// useFullSceneGlow
//--------------------------------------------------------------------------------
int zz_lua_useFullSceneGlow (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useFullSceneGlow";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );
	useFullSceneGlow( bUse  );

	return return_num;
}

//--------------------------------------------------------------------------------
// useGlow
//--------------------------------------------------------------------------------
int zz_lua_useGlow (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useGlow";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );
	useGlow( bUse  );

	return return_num;
}

//--------------------------------------------------------------------------------
// useSSAO
//--------------------------------------------------------------------------------
int zz_lua_useSSAO (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useSSAO";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );
	useSSAO( bUse  );

	return return_num;
}

//--------------------------------------------------------------------------------
// useGravity
//--------------------------------------------------------------------------------
int zz_lua_useGravity (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useGravity";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );
	int bUseOrNot = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useGravity( hVisible, bUseOrNot ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useHardwareVertexProcessing
//--------------------------------------------------------------------------------
int zz_lua_useHardwareVertexProcessing (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useHardwareVertexProcessing";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useHardwareVertexProcessing( bUse ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useLightmap
//--------------------------------------------------------------------------------
int zz_lua_useLightmap (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useLightmap";
	int return_num = 0;

	int bUseLightmap = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useLightmap( bUseLightmap ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useMotionInterpolation
//--------------------------------------------------------------------------------
int zz_lua_useMotionInterpolation (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useMotionInterpolation";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useMotionInterpolation( bUse ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useMultiPass
//--------------------------------------------------------------------------------
int zz_lua_useMultiPass (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useMultiPass";
	int return_num = 0;

	int bUseMultiPass = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useMultiPass( bUseMultiPass ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useObjectSorting
//--------------------------------------------------------------------------------
int zz_lua_useObjectSorting (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useObjectSorting";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useObjectSorting( bUse ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// usePixelShader
//--------------------------------------------------------------------------------
int zz_lua_usePixelShader (lua_State * L)
{
	int param_index = 1;
	const char where[] = "usePixelShader";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );

	set_param_int( L, return_num, usePixelShader( bUse ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// usePolygonSorting
//--------------------------------------------------------------------------------
int zz_lua_usePolygonSorting (lua_State * L)
{
	int param_index = 1;
	const char where[] = "usePolygonSorting";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );

	set_param_int( L, return_num, usePolygonSorting( bUse ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useRefreshCull
//--------------------------------------------------------------------------------
int zz_lua_useRefreshCull (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useRefreshCull";
	int return_num = 0;

	int bRefresh = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useRefreshCull( bRefresh ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useShadowmap
//--------------------------------------------------------------------------------
int zz_lua_useShadowmap (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useShadowmap";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );
	useShadowmap( bUse  );

	return return_num;
}

//--------------------------------------------------------------------------------
// useTerrainLOD
//--------------------------------------------------------------------------------
int zz_lua_useTerrainLOD (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useTerrainLOD";
	int return_num = 0;

	int bUseLOD = get_param_int( L, param_index, where );
	useTerrainLOD( bUseLOD  );

	return return_num;
}

//--------------------------------------------------------------------------------
// useVSync
//--------------------------------------------------------------------------------
int zz_lua_useVSync (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useVSync";
	int return_num = 0;

	int bUseVSync = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useVSync( bUseVSync ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useVertexShader
//--------------------------------------------------------------------------------
int zz_lua_useVertexShader (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useVertexShader";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useVertexShader( bUse ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// useWireMode
//--------------------------------------------------------------------------------
int zz_lua_useWireMode (lua_State * L)
{
	int param_index = 1;
	const char where[] = "useWireMode";
	int return_num = 0;

	int bUse = get_param_int( L, param_index, where );

	set_param_int( L, return_num, useWireMode( bUse ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// weldMesh
//--------------------------------------------------------------------------------
int zz_lua_weldMesh (lua_State * L)
{
	int param_index = 1;
	const char where[] = "weldMesh";
	int return_num = 0;

	HNODE hMesh = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, weldMesh( hMesh ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// worldToScreenScript
//--------------------------------------------------------------------------------
int zz_lua_worldToScreenScript (lua_State * L)
{
	int param_index = 1;
	const char where[] = "worldToScreenScript";
	int return_num = 0;

	float fWorldX = get_param_float( L, param_index, where );
	float fWorldY = get_param_float( L, param_index, where );
	float fWorldZ = get_param_float( L, param_index, where );
	worldToScreenScript( fWorldX, fWorldY, fWorldZ  );

	return return_num;
}

//--------------------------------------------------------------------------------
// zeroVisibleVelocityZ
//--------------------------------------------------------------------------------
int zz_lua_zeroVisibleVelocityZ (lua_State * L)
{
	int param_index = 1;
	const char where[] = "zeroVisibleVelocityZ";
	int return_num = 0;

	HNODE hVisible = get_param_uint( L, param_index, where );

	set_param_int( L, return_num, zeroVisibleVelocityZ( hVisible ) );

	return return_num;
}

//--------------------------------------------------------------------------------
// register api interfaces
//--------------------------------------------------------------------------------
void register_api_interfaces (lua_State * L)
{
	lua_register( L, "activateLog", zz_lua_activateLog );
	lua_register( L, "addRenderUnit", zz_lua_addRenderUnit );
	lua_register( L, "applyMotion", zz_lua_applyMotion );
	lua_register( L, "attachMotion", zz_lua_attachMotion );
	lua_register( L, "beginPan", zz_lua_beginPan );
	lua_register( L, "beginProfiler", zz_lua_beginProfiler );
	lua_register( L, "beginScene", zz_lua_beginScene );
	lua_register( L, "beginSprite", zz_lua_beginSprite );
	lua_register( L, "beginTrackball", zz_lua_beginTrackball );
	lua_register( L, "buildNormal", zz_lua_buildNormal );
	lua_register( L, "buildScene", zz_lua_buildScene );
	lua_register( L, "callFloat", zz_lua_callFloat );
	lua_register( L, "callHNODE", zz_lua_callHNODE );
	lua_register( L, "callInt", zz_lua_callInt );
	lua_register( L, "callString", zz_lua_callString );
	lua_register( L, "cameraAttachTarget", zz_lua_cameraAttachTarget );
	lua_register( L, "cameraDetachTarget", zz_lua_cameraDetachTarget );
	lua_register( L, "cameraUpdate", zz_lua_cameraUpdate );
	lua_register( L, "clearMeshMatid", zz_lua_clearMeshMatid );
	lua_register( L, "clearRenderUnit", zz_lua_clearRenderUnit );
	lua_register( L, "clearScreen", zz_lua_clearScreen );
	lua_register( L, "clearSpecialEffect", zz_lua_clearSpecialEffect );
	lua_register( L, "closeFileSystem", zz_lua_closeFileSystem );
	lua_register( L, "collectByMinMax", zz_lua_collectByMinMax );
	lua_register( L, "collectByNodeBBox", zz_lua_collectByNodeBBox );
	lua_register( L, "controlAnimatable", zz_lua_controlAnimatable );
	lua_register( L, "controlParticle", zz_lua_controlParticle );
	lua_register( L, "controlTrail", zz_lua_controlTrail );
	lua_register( L, "cullScene", zz_lua_cullScene );
	lua_register( L, "destSoundSystem", zz_lua_destSoundSystem );
	lua_register( L, "doLog", zz_lua_doLog );
	lua_register( L, "doPan", zz_lua_doPan );
	lua_register( L, "doScript", zz_lua_doScript );
	lua_register( L, "dollyCamera", zz_lua_dollyCamera );
	lua_register( L, "drawFontLater", zz_lua_drawFontLater );
	lua_register( L, "drawFontScript", zz_lua_drawFontScript );
	lua_register( L, "dumpResourcesInViewstrum", zz_lua_dumpResourcesInViewstrum );
	lua_register( L, "enableRenderState", zz_lua_enableRenderState );
	lua_register( L, "endPan", zz_lua_endPan );
	lua_register( L, "endProfiler", zz_lua_endProfiler );
	lua_register( L, "endScene", zz_lua_endScene );
	lua_register( L, "endSprite", zz_lua_endSprite );
	lua_register( L, "endTrackball", zz_lua_endTrackball );
	lua_register( L, "fadeIn", zz_lua_fadeIn );
	lua_register( L, "fileClose", zz_lua_fileClose );
	lua_register( L, "fileReadFrom", zz_lua_fileReadFrom );
	lua_register( L, "fileReadWord", zz_lua_fileReadWord );
	lua_register( L, "findNode", zz_lua_findNode );
	lua_register( L, "flushSprite", zz_lua_flushSprite );
	lua_register( L, "generateMeshStrip", zz_lua_generateMeshStrip );
	lua_register( L, "getAnimatableSpeed", zz_lua_getAnimatableSpeed );
	lua_register( L, "getAnimatableState", zz_lua_getAnimatableState );
	lua_register( L, "getBone", zz_lua_getBone );
	lua_register( L, "getCameraDefault", zz_lua_getCameraDefault );
	lua_register( L, "getCameraEyeX", zz_lua_getCameraEyeX );
	lua_register( L, "getCameraEyeY", zz_lua_getCameraEyeY );
	lua_register( L, "getCameraEyeZ", zz_lua_getCameraEyeZ );
	lua_register( L, "getCameraFollowDistance", zz_lua_getCameraFollowDistance );
	lua_register( L, "getCameraFollowPitch", zz_lua_getCameraFollowPitch );
	lua_register( L, "getCameraFollowYaw", zz_lua_getCameraFollowYaw );
	lua_register( L, "getCameraLight", zz_lua_getCameraLight );
	lua_register( L, "getCollectNode", zz_lua_getCollectNode );
	lua_register( L, "getCollisionLevel", zz_lua_getCollisionLevel );
	lua_register( L, "getDefaultLight", zz_lua_getDefaultLight );
	lua_register( L, "getDevice", zz_lua_getDevice );
	lua_register( L, "getDrawPriority", zz_lua_getDrawPriority );
	lua_register( L, "getDummyPositionScript", zz_lua_getDummyPositionScript );
	lua_register( L, "getEngineVersion", zz_lua_getEngineVersion );
	lua_register( L, "getExcludeClasses", zz_lua_getExcludeClasses );
	lua_register( L, "getFloatArray", zz_lua_getFloatArray );
	lua_register( L, "getFontHeight", zz_lua_getFontHeight );
	lua_register( L, "getFps", zz_lua_getFps );
	lua_register( L, "getFullScreen", zz_lua_getFullScreen );
	lua_register( L, "getGlobalFloat", zz_lua_getGlobalFloat );
	lua_register( L, "getGravityVelocityZ", zz_lua_getGravityVelocityZ );
	lua_register( L, "getIncludeClasses", zz_lua_getIncludeClasses );
	lua_register( L, "getMaterialShader", zz_lua_getMaterialShader );
	lua_register( L, "getMeshInfo", zz_lua_getMeshInfo );
	lua_register( L, "getMeshNumClipFaces", zz_lua_getMeshNumClipFaces );
	lua_register( L, "getModelDirection", zz_lua_getModelDirection );
	lua_register( L, "getModelDirectionVectorScript", zz_lua_getModelDirectionVectorScript );
	lua_register( L, "getModelFrontScript", zz_lua_getModelFrontScript );
	lua_register( L, "getModelHeight", zz_lua_getModelHeight );
	lua_register( L, "getModelMoveVelocity", zz_lua_getModelMoveVelocity );
	lua_register( L, "getMonitorRefreshRate", zz_lua_getMonitorRefreshRate );
	lua_register( L, "getMotion", zz_lua_getMotion );
	lua_register( L, "getMotionFrame", zz_lua_getMotionFrame );
	lua_register( L, "getMotionTotalFrame", zz_lua_getMotionTotalFrame );
	lua_register( L, "getMotionTotalTime", zz_lua_getMotionTotalTime );
	lua_register( L, "getName", zz_lua_getName );
	lua_register( L, "getNumAdapter", zz_lua_getNumAdapter );
	lua_register( L, "getNumBones", zz_lua_getNumBones );
	lua_register( L, "getNumDummies", zz_lua_getNumDummies );
	lua_register( L, "getNumRenderUnit", zz_lua_getNumRenderUnit );
	lua_register( L, "getNumSceneNode", zz_lua_getNumSceneNode );
	lua_register( L, "getParent", zz_lua_getParent );
	lua_register( L, "getParticleState", zz_lua_getParticleState );
	lua_register( L, "getPositionScript", zz_lua_getPositionScript );
	lua_register( L, "getPositionX", zz_lua_getPositionX );
	lua_register( L, "getPositionY", zz_lua_getPositionY );
	lua_register( L, "getPositionZ", zz_lua_getPositionZ );
	lua_register( L, "getPrevPositionX", zz_lua_getPrevPositionX );
	lua_register( L, "getPrevPositionY", zz_lua_getPrevPositionY );
	lua_register( L, "getPrevPositionZ", zz_lua_getPrevPositionZ );
	lua_register( L, "getRealPath", zz_lua_getRealPath );
	lua_register( L, "getRepeatCount", zz_lua_getRepeatCount );
	lua_register( L, "getSceneNode", zz_lua_getSceneNode );
	lua_register( L, "getScreenHeight", zz_lua_getScreenHeight );
	lua_register( L, "getScreenWidth", zz_lua_getScreenWidth );
	lua_register( L, "getSlidingScript", zz_lua_getSlidingScript );
	lua_register( L, "getSoundState", zz_lua_getSoundState );
	lua_register( L, "getStartDelay", zz_lua_getStartDelay );
	lua_register( L, "getTerrainHeight", zz_lua_getTerrainHeight );
	lua_register( L, "getTexture", zz_lua_getTexture );
	lua_register( L, "getTexturePointer", zz_lua_getTexturePointer );
	lua_register( L, "getTimeDiff", zz_lua_getTimeDiff );
	lua_register( L, "getTrailState", zz_lua_getTrailState );
	lua_register( L, "getUseFog", zz_lua_getUseFog );
	lua_register( L, "getUseWireMode", zz_lua_getUseWireMode );
	lua_register( L, "getUserData", zz_lua_getUserData );
	lua_register( L, "getVisibility", zz_lua_getVisibility );
	lua_register( L, "getVisibleClipFace", zz_lua_getVisibleClipFace );
	lua_register( L, "getVisibleHeight", zz_lua_getVisibleHeight );
	lua_register( L, "getVisibleLight", zz_lua_getVisibleLight );
	lua_register( L, "getVisibleMaterial", zz_lua_getVisibleMaterial );
	lua_register( L, "getVisibleMesh", zz_lua_getVisibleMesh );
	lua_register( L, "getVisibleRadius", zz_lua_getVisibleRadius );
	lua_register( L, "getVisibleSeethruMode", zz_lua_getVisibleSeethruMode );
	lua_register( L, "getWorldHeight", zz_lua_getWorldHeight );
	lua_register( L, "getWorldObjectHeightInScene", zz_lua_getWorldObjectHeightInScene );
	lua_register( L, "inViewfrustum", zz_lua_inViewfrustum );
	lua_register( L, "initSoundSystem", zz_lua_initSoundSystem );
	lua_register( L, "insertToScene", zz_lua_insertToScene );
	lua_register( L, "intersectNode", zz_lua_intersectNode );
	lua_register( L, "intersectNodeSphereSphere", zz_lua_intersectNodeSphereSphere );
	lua_register( L, "intersectRayScript", zz_lua_intersectRayScript );
	lua_register( L, "isA", zz_lua_isA );
	lua_register( L, "isDescendantOf", zz_lua_isDescendantOf );
	lua_register( L, "isDescendantOfType", zz_lua_isDescendantOfType );
	lua_register( L, "linkBone", zz_lua_linkBone );
	lua_register( L, "linkDummy", zz_lua_linkDummy );
	lua_register( L, "linkNode", zz_lua_linkNode );
	lua_register( L, "linkVisibleWorld", zz_lua_linkVisibleWorld );
	lua_register( L, "loadAnimatable", zz_lua_loadAnimatable );
	lua_register( L, "loadCamera", zz_lua_loadCamera );
	lua_register( L, "loadCharacter", zz_lua_loadCharacter );
	lua_register( L, "loadColormapMaterial", zz_lua_loadColormapMaterial );
	lua_register( L, "loadEffect", zz_lua_loadEffect );
	lua_register( L, "loadFont", zz_lua_loadFont );
	lua_register( L, "loadLight", zz_lua_loadLight );
	lua_register( L, "loadLightPoint", zz_lua_loadLightPoint );
	lua_register( L, "loadMesh", zz_lua_loadMesh );
	lua_register( L, "loadModel", zz_lua_loadModel );
	lua_register( L, "loadMorpher", zz_lua_loadMorpher );
	lua_register( L, "loadMotion", zz_lua_loadMotion );
	lua_register( L, "loadMotionMixer", zz_lua_loadMotionMixer );
	lua_register( L, "loadNullColormapMaterial", zz_lua_loadNullColormapMaterial );
	lua_register( L, "loadOceanBlock", zz_lua_loadOceanBlock );
	lua_register( L, "loadOceanMaterial", zz_lua_loadOceanMaterial );
	lua_register( L, "loadParticle", zz_lua_loadParticle );
	lua_register( L, "loadParticleFromMem", zz_lua_loadParticleFromMem );
	lua_register( L, "loadShader", zz_lua_loadShader );
	lua_register( L, "loadSkeleton", zz_lua_loadSkeleton );
	lua_register( L, "loadSky", zz_lua_loadSky );
	lua_register( L, "loadSkyMaterial", zz_lua_loadSkyMaterial );
	lua_register( L, "loadSound", zz_lua_loadSound );
	lua_register( L, "loadTerrainBlockTest", zz_lua_loadTerrainBlockTest );
	lua_register( L, "loadText", zz_lua_loadText );
	lua_register( L, "loadTexture", zz_lua_loadTexture );
	lua_register( L, "loadTextureWithPool", zz_lua_loadTextureWithPool );
	lua_register( L, "loadTrailScript", zz_lua_loadTrailScript );
	lua_register( L, "loadVisible", zz_lua_loadVisible );
	lua_register( L, "logTextures", zz_lua_logTextures );
	lua_register( L, "lookAt", zz_lua_lookAt );
	lua_register( L, "moveCamera", zz_lua_moveCamera );
	lua_register( L, "openFileSystem", zz_lua_openFileSystem );
	lua_register( L, "pickNodeScript", zz_lua_pickNodeScript );
	lua_register( L, "pickScreenX", zz_lua_pickScreenX );
	lua_register( L, "pickScreenY", zz_lua_pickScreenY );
	lua_register( L, "playSound", zz_lua_playSound );
	lua_register( L, "popRenderUnit", zz_lua_popRenderUnit );
	lua_register( L, "popSpecialEffect", zz_lua_popSpecialEffect );
	lua_register( L, "postProcessScene", zz_lua_postProcessScene );
	lua_register( L, "preProcessScene", zz_lua_preProcessScene );
	lua_register( L, "pushSpecialEffect", zz_lua_pushSpecialEffect );
	lua_register( L, "pushTexture", zz_lua_pushTexture );
	lua_register( L, "quaternionToModelDirection", zz_lua_quaternionToModelDirection );
	lua_register( L, "readLogString", zz_lua_readLogString );
	lua_register( L, "reloadTextures", zz_lua_reloadTextures );
	lua_register( L, "removeFromScene", zz_lua_removeFromScene );
	lua_register( L, "renderNode", zz_lua_renderNode );
	lua_register( L, "renderScene", zz_lua_renderScene );
	lua_register( L, "resetScreen", zz_lua_resetScreen );
	lua_register( L, "returnHNODE", zz_lua_returnHNODE );
	lua_register( L, "rotateAxis", zz_lua_rotateAxis );
	lua_register( L, "rotateByVectorAbsoluteScript", zz_lua_rotateByVectorAbsoluteScript );
	lua_register( L, "rotateByVectorRelativeScript", zz_lua_rotateByVectorRelativeScript );
	lua_register( L, "rotateCamera", zz_lua_rotateCamera );
	lua_register( L, "rotateTrackball", zz_lua_rotateTrackball );
	lua_register( L, "saveCamera", zz_lua_saveCamera );
	lua_register( L, "saveMesh", zz_lua_saveMesh );
	lua_register( L, "savePrevPosition", zz_lua_savePrevPosition );
	lua_register( L, "saveScreenshots", zz_lua_saveScreenshots );
	lua_register( L, "saveToBMP", zz_lua_saveToBMP );
	lua_register( L, "saveToDDS", zz_lua_saveToDDS );
	lua_register( L, "selectNode", zz_lua_selectNode );
	lua_register( L, "setAdapter", zz_lua_setAdapter );
	lua_register( L, "setAlphaFogRange", zz_lua_setAlphaFogRange );
	lua_register( L, "setAnimatableFrame", zz_lua_setAnimatableFrame );
	lua_register( L, "setAnimatableSpeed", zz_lua_setAnimatableSpeed );
	lua_register( L, "setAnimatableTime", zz_lua_setAnimatableTime );
	lua_register( L, "setAxisAngle", zz_lua_setAxisAngle );
	lua_register( L, "setBillboard", zz_lua_setBillboard );
	lua_register( L, "setBillboardOneAxis", zz_lua_setBillboardOneAxis );
	lua_register( L, "setBlendFactor", zz_lua_setBlendFactor );
	lua_register( L, "setBuffer", zz_lua_setBuffer );
	lua_register( L, "setCameraAspectRatio", zz_lua_setCameraAspectRatio );
	lua_register( L, "setCameraDefault", zz_lua_setCameraDefault );
	lua_register( L, "setCameraFollowDistance", zz_lua_setCameraFollowDistance );
	lua_register( L, "setCameraFollowDistanceRange", zz_lua_setCameraFollowDistanceRange );
	lua_register( L, "setCameraFollowMode", zz_lua_setCameraFollowMode );
	lua_register( L, "setCameraFollowPitch", zz_lua_setCameraFollowPitch );
	lua_register( L, "setCameraFollowYaw", zz_lua_setCameraFollowYaw );
	lua_register( L, "setCameraFov", zz_lua_setCameraFov );
	lua_register( L, "setCameraLight", zz_lua_setCameraLight );
	lua_register( L, "setCameraOrthogonal", zz_lua_setCameraOrthogonal );
	lua_register( L, "setCameraPerspective", zz_lua_setCameraPerspective );
	lua_register( L, "setCameraTargetHeight", zz_lua_setCameraTargetHeight );
	lua_register( L, "setCameraTransparency", zz_lua_setCameraTransparency );
	lua_register( L, "setCastShadow", zz_lua_setCastShadow );
	lua_register( L, "setClearColor", zz_lua_setClearColor );
	lua_register( L, "setCollisionLevel", zz_lua_setCollisionLevel );
	lua_register( L, "setDataPath", zz_lua_setDataPath );
	lua_register( L, "setDefaultLight", zz_lua_setDefaultLight );
	lua_register( L, "setDelayedLoad", zz_lua_setDelayedLoad );
	lua_register( L, "setDeltaTime", zz_lua_setDeltaTime );
	lua_register( L, "setDisplayQualityLevel", zz_lua_setDisplayQualityLevel );
	lua_register( L, "setDrawPriority", zz_lua_setDrawPriority );
	lua_register( L, "setDrawShadowmapViewport", zz_lua_setDrawShadowmapViewport );
	lua_register( L, "setExcludeClasses", zz_lua_setExcludeClasses );
	lua_register( L, "setFileSytem", zz_lua_setFileSytem );
	lua_register( L, "setFloatArray", zz_lua_setFloatArray );
	lua_register( L, "setFogColor", zz_lua_setFogColor );
	lua_register( L, "setFogRange", zz_lua_setFogRange );
	lua_register( L, "setFontColor", zz_lua_setFontColor );
	lua_register( L, "setFontOutlineColor", zz_lua_setFontOutlineColor );
	lua_register( L, "setFramerateRange", zz_lua_setFramerateRange );
	lua_register( L, "setFullSceneAntiAliasing", zz_lua_setFullSceneAntiAliasing );
	lua_register( L, "setFullSceneGlowColor", zz_lua_setFullSceneGlowColor );
	lua_register( L, "setFullSceneGlowType", zz_lua_setFullSceneGlowType );
	lua_register( L, "setGammaValue", zz_lua_setGammaValue );
	lua_register( L, "setGlowColor", zz_lua_setGlowColor );
	lua_register( L, "setGlowmapSize", zz_lua_setGlowmapSize );
	lua_register( L, "setGravityScript", zz_lua_setGravityScript );
	lua_register( L, "setIncludeClasses", zz_lua_setIncludeClasses );
	lua_register( L, "setLazyBufferSize", zz_lua_setLazyBufferSize );
	lua_register( L, "setLight", zz_lua_setLight );
	lua_register( L, "setLightmapBlendStyle", zz_lua_setLightmapBlendStyle );
	lua_register( L, "setMagFilter", zz_lua_setMagFilter );
	lua_register( L, "setMaterialAlphaRef", zz_lua_setMaterialAlphaRef );
	lua_register( L, "setMaterialAlphaValue", zz_lua_setMaterialAlphaValue );
	lua_register( L, "setMaterialBlendType", zz_lua_setMaterialBlendType );
	lua_register( L, "setMaterialBlendTypeCustom", zz_lua_setMaterialBlendTypeCustom );
	lua_register( L, "setMaterialGlow", zz_lua_setMaterialGlow );
	lua_register( L, "setMaterialLightmap", zz_lua_setMaterialLightmap );
	lua_register( L, "setMaterialObjectAlpha", zz_lua_setMaterialObjectAlpha );
	lua_register( L, "setMaterialShader", zz_lua_setMaterialShader );
	lua_register( L, "setMaterialTextureAddress", zz_lua_setMaterialTextureAddress );
	lua_register( L, "setMaterialUseAlpha", zz_lua_setMaterialUseAlpha );
	lua_register( L, "setMaterialUseAlphaTest", zz_lua_setMaterialUseAlphaTest );
	lua_register( L, "setMaterialUseLight", zz_lua_setMaterialUseLight );
	lua_register( L, "setMaterialUseSpecular", zz_lua_setMaterialUseSpecular );
	lua_register( L, "setMaterialUseTwoSide", zz_lua_setMaterialUseTwoSide );
	lua_register( L, "setMaterialZTest", zz_lua_setMaterialZTest );
	lua_register( L, "setMaterialZWrite", zz_lua_setMaterialZWrite );
	lua_register( L, "setMaxSimultaneousBone", zz_lua_setMaxSimultaneousBone );
	lua_register( L, "setMeshNumClipFaces", zz_lua_setMeshNumClipFaces );
	lua_register( L, "setMeshType", zz_lua_setMeshType );
	lua_register( L, "setMinFilter", zz_lua_setMinFilter );
	lua_register( L, "setMipmapFilter", zz_lua_setMipmapFilter );
	lua_register( L, "setMipmapLevel", zz_lua_setMipmapLevel );
	lua_register( L, "setModelDirection", zz_lua_setModelDirection );
	lua_register( L, "setModelDirectionByPosition", zz_lua_setModelDirectionByPosition );
	lua_register( L, "setModelMoveVelocity", zz_lua_setModelMoveVelocity );
	lua_register( L, "setMonitorRefreshRate", zz_lua_setMonitorRefreshRate );
	lua_register( L, "setMotionInterpolationRange", zz_lua_setMotionInterpolationRange );
	lua_register( L, "setMotionInterporationInterval", zz_lua_setMotionInterporationInterval );
	lua_register( L, "setName", zz_lua_setName );
	lua_register( L, "setObbox", zz_lua_setObbox );
	lua_register( L, "setOceanBlockInterval", zz_lua_setOceanBlockInterval );
	lua_register( L, "setPosition", zz_lua_setPosition );
	lua_register( L, "setQuaternion", zz_lua_setQuaternion );
	lua_register( L, "setReceiveFog", zz_lua_setReceiveFog );
	lua_register( L, "setReceiveShadow", zz_lua_setReceiveShadow );
	lua_register( L, "setRendererMagFilter", zz_lua_setRendererMagFilter );
	lua_register( L, "setRendererMinFilter", zz_lua_setRendererMinFilter );
	lua_register( L, "setRepeatCount", zz_lua_setRepeatCount );
	lua_register( L, "setScale", zz_lua_setScale );
	lua_register( L, "setScreen", zz_lua_setScreen );
	lua_register( L, "setShaderFormat", zz_lua_setShaderFormat );
	lua_register( L, "setShadowmapBlurType", zz_lua_setShadowmapBlurType );
	lua_register( L, "setShadowmapColor", zz_lua_setShadowmapColor );
	lua_register( L, "setShadowmapSize", zz_lua_setShadowmapSize );
	lua_register( L, "setSkyMaterialBlendRatio", zz_lua_setSkyMaterialBlendRatio );
	lua_register( L, "setSkyRotationSpeed", zz_lua_setSkyRotationSpeed );
	lua_register( L, "setStartDelay", zz_lua_setStartDelay );
	lua_register( L, "setTextureLoadingFormat", zz_lua_setTextureLoadingFormat );
	lua_register( L, "setTextureLoadingScale", zz_lua_setTextureLoadingScale );
	lua_register( L, "setTimeDelay", zz_lua_setTimeDelay );
	lua_register( L, "setUseFixedFramerate", zz_lua_setUseFixedFramerate );
	lua_register( L, "setUseTimeWeight", zz_lua_setUseTimeWeight );
	lua_register( L, "setUserData", zz_lua_setUserData );
	lua_register( L, "setVisibility", zz_lua_setVisibility );
	lua_register( L, "setVisibilityRecursive", zz_lua_setVisibilityRecursive );
	lua_register( L, "setVisibleClipFace", zz_lua_setVisibleClipFace );
	lua_register( L, "setVisibleGlow", zz_lua_setVisibleGlow );
	lua_register( L, "setVisibleGlowRecursive", zz_lua_setVisibleGlowRecursive );
	lua_register( L, "setVisibleJump", zz_lua_setVisibleJump );
	lua_register( L, "setVisibleLight", zz_lua_setVisibleLight );
	lua_register( L, "setVisibleMaterial", zz_lua_setVisibleMaterial );
	lua_register( L, "setVisibleMesh", zz_lua_setVisibleMesh );
	lua_register( L, "setVisibleRangeFromCamera", zz_lua_setVisibleRangeFromCamera );
	lua_register( L, "setVisibleRenderUnitGlow", zz_lua_setVisibleRenderUnitGlow );
	lua_register( L, "setWindowText", zz_lua_setWindowText );
	lua_register( L, "shootRay", zz_lua_shootRay );
	lua_register( L, "stopSound", zz_lua_stopSound );
	lua_register( L, "swapBuffers", zz_lua_swapBuffers );
	lua_register( L, "traverseNode", zz_lua_traverseNode );
	lua_register( L, "turnModel", zz_lua_turnModel );
	lua_register( L, "unlinkNode", zz_lua_unlinkNode );
	lua_register( L, "unlinkVisibleWorld", zz_lua_unlinkVisibleWorld );
	lua_register( L, "unloadAllText", zz_lua_unloadAllText );
	lua_register( L, "unloadAnimatable", zz_lua_unloadAnimatable );
	lua_register( L, "unloadCamera", zz_lua_unloadCamera );
	lua_register( L, "unloadEffect", zz_lua_unloadEffect );
	lua_register( L, "unloadFont", zz_lua_unloadFont );
	lua_register( L, "unloadLight", zz_lua_unloadLight );
	lua_register( L, "unloadMaterial", zz_lua_unloadMaterial );
	lua_register( L, "unloadMesh", zz_lua_unloadMesh );
	lua_register( L, "unloadModel", zz_lua_unloadModel );
	lua_register( L, "unloadMorpher", zz_lua_unloadMorpher );
	lua_register( L, "unloadMotion", zz_lua_unloadMotion );
	lua_register( L, "unloadNode", zz_lua_unloadNode );
	lua_register( L, "unloadNodeRecursive", zz_lua_unloadNodeRecursive );
	lua_register( L, "unloadOceanBlock", zz_lua_unloadOceanBlock );
	lua_register( L, "unloadParticle", zz_lua_unloadParticle );
	lua_register( L, "unloadShader", zz_lua_unloadShader );
	lua_register( L, "unloadSkeleton", zz_lua_unloadSkeleton );
	lua_register( L, "unloadSky", zz_lua_unloadSky );
	lua_register( L, "unloadSound", zz_lua_unloadSound );
	lua_register( L, "unloadTerrainBlock", zz_lua_unloadTerrainBlock );
	lua_register( L, "unloadText", zz_lua_unloadText );
	lua_register( L, "unloadTexture", zz_lua_unloadTexture );
	lua_register( L, "unloadTrail", zz_lua_unloadTrail );
	lua_register( L, "unloadVisible", zz_lua_unloadVisible );
	lua_register( L, "updateScene", zz_lua_updateScene );
	lua_register( L, "updateSceneTransform", zz_lua_updateSceneTransform );
	lua_register( L, "updateSoundSystem", zz_lua_updateSoundSystem );
	lua_register( L, "useCull", zz_lua_useCull );
	lua_register( L, "useDebugDisplay", zz_lua_useDebugDisplay );
	lua_register( L, "useDrawBoundingVolume", zz_lua_useDrawBoundingVolume );
	lua_register( L, "useDrawTextRect", zz_lua_useDrawTextRect );
	lua_register( L, "useDrawViewFrustum", zz_lua_useDrawViewFrustum );
	lua_register( L, "useFileTimeStamp", zz_lua_useFileTimeStamp );
	lua_register( L, "useFog", zz_lua_useFog );
	lua_register( L, "useFullSceneGlow", zz_lua_useFullSceneGlow );
	lua_register( L, "useGlow", zz_lua_useGlow );
	lua_register( L, "useSSAO", zz_lua_useSSAO );
	lua_register( L, "useGravity", zz_lua_useGravity );
	lua_register( L, "useHardwareVertexProcessing", zz_lua_useHardwareVertexProcessing );
	lua_register( L, "useLightmap", zz_lua_useLightmap );
	lua_register( L, "useMotionInterpolation", zz_lua_useMotionInterpolation );
	lua_register( L, "useMultiPass", zz_lua_useMultiPass );
	lua_register( L, "useObjectSorting", zz_lua_useObjectSorting );
	lua_register( L, "usePixelShader", zz_lua_usePixelShader );
	lua_register( L, "usePolygonSorting", zz_lua_usePolygonSorting );
	lua_register( L, "useRefreshCull", zz_lua_useRefreshCull );
	lua_register( L, "useShadowmap", zz_lua_useShadowmap );
	lua_register( L, "useTerrainLOD", zz_lua_useTerrainLOD );
	lua_register( L, "useVSync", zz_lua_useVSync );
	lua_register( L, "useVertexShader", zz_lua_useVertexShader );
	lua_register( L, "useWireMode", zz_lua_useWireMode );
	lua_register( L, "weldMesh", zz_lua_weldMesh );
	lua_register( L, "worldToScreenScript", zz_lua_worldToScreenScript );
	lua_register( L, "zeroVisibleVelocityZ", zz_lua_zeroVisibleVelocityZ );
}
// end of file.
